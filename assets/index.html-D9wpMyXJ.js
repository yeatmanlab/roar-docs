import{_ as l,c as o,a as e,e as t,f as i,b as s,d as r,r as p,o as d}from"./app-DaI1-wMW.js";const c={},u={id:"collectiontype",tabindex:"-1"},m={class:"header-anchor",href:"#collectiontype"},v={id:"identityprovidertype",tabindex:"-1"},h={class:"header-anchor",href:"#identityprovidertype"},k={id:"operator",tabindex:"-1"},y={class:"header-anchor",href:"#operator"};function b(g,n){const a=p("RouteLink");return d(),o("div",null,[n[3]||(n[3]=e("h1",{id:"enumerations",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#enumerations"},[e("span",null,"Enumerations")])],-1)),n[4]||(n[4]=e("p",null,"This documentation covers the enumerations used in the ROAR Firebase Functions backend architecture. Enumerations provide type-safe sets of named constants used throughout the system.",-1)),n[5]||(n[5]=e("h2",{id:"available-enumerations",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#available-enumerations"},[e("span",null,"Available Enumerations")])],-1)),e("h3",u,[e("a",m,[e("span",null,[t(a,{to:"/developer/backend-architecture/api/enumerations/CollectionType.html"},{default:i(()=>n[0]||(n[0]=[s("CollectionType")])),_:1})])])]),n[6]||(n[6]=e("p",null,"Defines the types of Firestore collections:",-1)),n[7]||(n[7]=e("ul",null,[e("li",null,[e("code",null,"Collection"),s(" - Standard Firestore collection")]),e("li",null,[e("code",null,"CollectionGroup"),s(" - Firestore collection group")])],-1)),e("h3",v,[e("a",h,[e("span",null,[t(a,{to:"/developer/backend-architecture/api/enumerations/IdentityProviderType.html"},{default:i(()=>n[1]||(n[1]=[s("IdentityProviderType")])),_:1})])])]),n[8]||(n[8]=e("p",null,"Specifies supported Single Sign-On (SSO) providers:",-1)),n[9]||(n[9]=e("ul",null,[e("li",null,[e("code",null,"CLEVER"),s(" - Clever SSO integration")]),e("li",null,[e("code",null,"CLASSLINK"),s(" - ClassLink SSO integration")])],-1)),e("h3",k,[e("a",y,[e("span",null,[t(a,{to:"/developer/backend-architecture/api/enumerations/Operator.html"},{default:i(()=>n[2]||(n[2]=[s("Operator")])),_:1})])])]),n[10]||(n[10]=r(`<p>Defines comparison operators used in queries and filters:</p><ul><li><code>LESS_THAN</code></li><li><code>GREATER_THAN</code></li><li><code>LESS_THAN_OR_EQUAL</code></li><li><code>GREATER_THAN_OR_EQUAL</code></li><li><code>EQUAL</code></li><li><code>NOT_EQUAL</code></li></ul><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h2><p>These enumerations are used throughout the codebase to:</p><ol><li>Provide type safety when working with collections, providers, and operators</li><li>Standardize string constants</li><li>Enable compile-time checking of valid values</li><li>Make code more maintainable by centralizing constant definitions</li></ol><p>Example usage:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// Using CollectionType</span></span>
<span class="line"><span class="token keyword">const</span> type <span class="token operator">=</span> CollectionType<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Using IdentityProviderType</span></span>
<span class="line"><span class="token keyword">const</span> provider <span class="token operator">=</span> IdentityProviderType<span class="token punctuation">.</span><span class="token constant">CLEVER</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Using Operator in filters</span></span>
<span class="line"><span class="token keyword">const</span> filter <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  operator<span class="token operator">:</span> Operator<span class="token punctuation">.</span><span class="token constant">EQUAL</span><span class="token punctuation">,</span></span>
<span class="line">  value<span class="token operator">:</span> <span class="token string">&quot;someValue&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For more details on each enumeration, click the links above to view the individual documentation pages.</p>`,8))])}const E=l(c,[["render",b],["__file","index.html.vue"]]),T=JSON.parse('{"path":"/developer/backend-architecture/api/enumerations/","title":"Enumerations","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Available Enumerations","slug":"available-enumerations","link":"#available-enumerations","children":[{"level":3,"title":"CollectionType","slug":"collectiontype","link":"#collectiontype","children":[]},{"level":3,"title":"IdentityProviderType","slug":"identityprovidertype","link":"#identityprovidertype","children":[]},{"level":3,"title":"Operator","slug":"operator","link":"#operator","children":[]}]},{"level":2,"title":"Usage","slug":"usage","link":"#usage","children":[]}],"git":{"updatedTime":1744660884000,"contributors":[{"name":"Kyle","username":"Kyle","email":"ksmontville@gmail.com","commits":2,"url":"https://github.com/Kyle"}]},"filePathRelative":"developer/backend-architecture/api/enumerations/README.md"}');export{E as comp,T as data};
