import{_ as s,c as a,d as p,o as e}from"./app-Ca7ae2ic.js";const t={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="multichoice-clowder" tabindex="-1"><a class="header-anchor" href="#multichoice-clowder"><span>Multichoice - Clowder</span></a></h1><h3 id="_1-parameter-extraction-from-url-serve-serve-js" tabindex="-1"><a class="header-anchor" href="#_1-parameter-extraction-from-url-serve-serve-js"><span>1. <strong>Parameter Extraction from URL (<code>serve/serve.js</code>)</strong></span></a></h3><ul><li>Extract Clowder-specific parameters such as <code>earlyStopping</code>, <code>tolerance</code>, and <code>logicalOperation</code>.</li><li>Add these parameters to the <code>gameParams</code> array.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Parameters for Clowder</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> earlyStopping <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;earlyStopping&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> tolerance <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;tolerance&#39;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> logicalOperation <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;logicalOperation&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Other useful parameters</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> threshold <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;threshold&#39;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> patience <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;patience&#39;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> nItems <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;nItems&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;nItems&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> randomSeed <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;random&#39;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> catsToUpdate <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;catsToUpdate&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Add more parameters for Clowder if needed</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-initialize-clowder-in-the-store-session-experiment-config-config-js" tabindex="-1"><a class="header-anchor" href="#_2-initialize-clowder-in-the-store-session-experiment-config-config-js"><span>2. <strong>Initialize Clowder in the Store Session (<code>experiment/config/config.js</code>)</strong></span></a></h3><ul><li>Inside the <code>initStore</code> function, set the following:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;previousItem&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;previousAnswer&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Select the corpus in advance</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">practiceCorpus</span><span class="token operator">:</span></span>
<span class="line">    task <span class="token operator">===</span> <span class="token string">&quot;cva&quot;</span></span>
<span class="line">      <span class="token operator">?</span> practiceCorpus <span class="token operator">||</span> <span class="token string">&quot;cva-practice-catv2&quot;</span></span>
<span class="line">      <span class="token operator">:</span> practiceCorpus <span class="token operator">||</span> <span class="token string">&quot;morphology-practice-catv2&quot;</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  <span class="token literal-property property">stimulusCorpus</span><span class="token operator">:</span></span>
<span class="line">    task <span class="token operator">===</span> <span class="token string">&quot;cva&quot;</span></span>
<span class="line">      <span class="token operator">?</span> stimulusCorpus <span class="token operator">||</span> <span class="token string">&quot;cva-stimulus-catv2&quot;</span></span>
<span class="line">      <span class="token operator">:</span> stimulusCorpus <span class="token operator">||</span> <span class="token string">&quot;morphology-catv2&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Initialize Clowder before returning the session:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">initializeClowder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="_3-create-cats-and-clowder-experiment-experimentsetup-js" tabindex="-1"><a class="header-anchor" href="#_3-create-cats-and-clowder-experiment-experimentsetup-js"><span>3. <strong>Create CATs and Clowder (<code>experiment/experimentSetup.js</code>)</strong></span></a></h3><ul><li>Implement the <code>initializeClowder</code> function to set up Clowder instances for different phoneme-related trials.</li><li>Define <code>catsConfig</code> for each Clowder instance, specifying <code>method</code>, <code>itemSelect</code>, <code>minTheta</code>, <code>maxTheta</code>, and <code>randomSeed</code>.</li><li>Initialize Clowder’s corpus using <code>prepareClowderCorpus</code>.</li><li>Select the next stimulus using the Clowder function <code>updateCatAndGetNextItem</code>.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Cat<span class="token punctuation">,</span> Clowder<span class="token punctuation">,</span> prepareClowderCorpus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@bdelab/jscat&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> catOrderMap <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&#39;practiceFSM&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&#39;fsm&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&#39;practiceLSM&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&#39;lsm&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">4</span><span class="token operator">:</span> <span class="token string">&#39;practiceDEL&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">5</span><span class="token operator">:</span> <span class="token string">&#39;del&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// eslint-disable-next-line import/no-mutable-exports</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">let</span> clowder<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// TODO: Update values accordingly</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">initializeClowder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Define the \`cats\` configuration</span></span>
<span class="line">  <span class="token keyword">const</span> catsConfig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">practice</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;EAP&quot;</span><span class="token punctuation">,</span> <span class="token comment">// MLE</span></span>
<span class="line">      <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&quot;itemSelect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&quot;seed-cat&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;EAP&quot;</span><span class="token punctuation">,</span> <span class="token comment">// MLE</span></span>
<span class="line">      <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&quot;itemSelect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&quot;seed-cat&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">core</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;EAP&quot;</span><span class="token punctuation">,</span> <span class="token comment">// MLE</span></span>
<span class="line">      <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&quot;itemSelect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&quot;seed-cat&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">new</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;EAP&quot;</span><span class="token punctuation">,</span> <span class="token comment">// MLE</span></span>
<span class="line">      <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&quot;itemSelect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&quot;seed-cat&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">spare</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;EAP&quot;</span><span class="token punctuation">,</span> <span class="token comment">// MLE</span></span>
<span class="line">      <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&quot;itemSelect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&quot;seed-cat&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// if (store.session.get(&#39;config&#39;).earlyStopping) {</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// USE EXAMPLE IN CASE OF EARLY STOPPING</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// let earlyStoppingCats = null;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// earlyStoppingCats = new StopAfterNItems({</span></span>
<span class="line">  <span class="token comment">//   requiredItems: {</span></span>
<span class="line">  <span class="token comment">//     letterNameLower: store.session.get(&#39;config&#39;).nItems ?? 5,</span></span>
<span class="line">  <span class="token comment">//     letterNameUpper: store.session.get(&#39;config&#39;).nItems ?? 5,</span></span>
<span class="line">  <span class="token comment">//     letterPhoneme: store.session.get(&#39;config&#39;).nItems ?? 15,</span></span>
<span class="line">  <span class="token comment">//   },</span></span>
<span class="line">  <span class="token comment">//   logicalOperation: store.session.get(&#39;config&#39;).logicalOperation ?? &#39;only&#39;,</span></span>
<span class="line">  <span class="token comment">// });</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// USE IN CASE OF SEPARATE CATS</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// const corpusLetterNameLower = encorpusLetterNameLower.map((row) =&gt; ({</span></span>
<span class="line">  <span class="token comment">//   stimulus: row.target,</span></span>
<span class="line">  <span class="token comment">//   zetas: [</span></span>
<span class="line">  <span class="token comment">//     {</span></span>
<span class="line">  <span class="token comment">//       cats: [&#39;letterNameLower&#39;],</span></span>
<span class="line">  <span class="token comment">//       zeta: {</span></span>
<span class="line">  <span class="token comment">//         a: row.a,</span></span>
<span class="line">  <span class="token comment">//         b: row.b,</span></span>
<span class="line">  <span class="token comment">//         c: row.c,</span></span>
<span class="line">  <span class="token comment">//         d: row.d,</span></span>
<span class="line">  <span class="token comment">//       },</span></span>
<span class="line">  <span class="token comment">//     },</span></span>
<span class="line">  <span class="token comment">//   ],</span></span>
<span class="line">  <span class="token comment">//   ..._omit(row, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]),</span></span>
<span class="line">  <span class="token comment">// }));</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> corpus <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;corpora&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> combinedCorpus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>corpus<span class="token punctuation">.</span>practice<span class="token punctuation">,</span> <span class="token operator">...</span>corpus<span class="token punctuation">.</span>stimulus<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> clowderCorpus <span class="token operator">=</span> <span class="token function">prepareClowderCorpus</span><span class="token punctuation">(</span></span>
<span class="line">    combinedCorpus<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token string">&quot;total&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;core&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;new&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;spare&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;practice&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  clowder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clowder</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">cats</span><span class="token operator">:</span> catsConfig<span class="token punctuation">,</span> <span class="token comment">// [spare, new, core, total] cats</span></span>
<span class="line">    <span class="token literal-property property">corpus</span><span class="token operator">:</span> clowderCorpus<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>randomSeed <span class="token operator">??</span> <span class="token string">&quot;random-seed&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// earlyStopping: earlyStoppingCats,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;clowder&quot;</span><span class="token punctuation">,</span> clowder<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">setNextStimulus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> itemGroupCounter <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;itemGroupCounter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> coreRemaining <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;coreRemaining&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> newRemaining <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;newRemaining&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> spareRemaining <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;spareRemaining&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> practiceRemaining <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;practiceRemaining&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> catToSelect<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>practiceRemaining <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    catToSelect <span class="token operator">=</span> <span class="token string">&quot;practice&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;practiceRemaining&quot;</span><span class="token punctuation">,</span> practiceRemaining <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Your existing logic</span></span>
<span class="line">    catToSelect <span class="token operator">=</span></span>
<span class="line">      coreRemaining <span class="token operator">&gt;</span> <span class="token number">0</span></span>
<span class="line">        <span class="token operator">?</span> itemGroupCounter <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newRemaining <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> itemGroupCounter <span class="token operator">&gt;</span> <span class="token number">0</span></span>
<span class="line">          <span class="token operator">?</span> <span class="token string">&quot;new&quot;</span></span>
<span class="line">          <span class="token operator">:</span> <span class="token string">&quot;core&quot;</span></span>
<span class="line">        <span class="token operator">:</span> newRemaining <span class="token operator">&gt;</span> <span class="token number">0</span></span>
<span class="line">        <span class="token operator">?</span> itemGroupCounter <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">          spareRemaining <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">          itemGroupCounter <span class="token operator">&gt;</span> <span class="token number">0</span></span>
<span class="line">          <span class="token operator">?</span> <span class="token string">&quot;spare&quot;</span></span>
<span class="line">          <span class="token operator">:</span> <span class="token string">&quot;new&quot;</span></span>
<span class="line">        <span class="token operator">:</span> spareRemaining <span class="token operator">&gt;</span> <span class="token number">0</span></span>
<span class="line">        <span class="token operator">?</span> <span class="token string">&quot;spare&quot;</span></span>
<span class="line">        <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>catToSelect<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>catToSelect <span class="token operator">===</span> <span class="token string">&quot;core&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;coreRemaining&quot;</span><span class="token punctuation">,</span> coreRemaining <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;itemGroupCounter&quot;</span><span class="token punctuation">,</span> itemGroupCounter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>catToSelect <span class="token operator">===</span> <span class="token string">&quot;new&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;newRemaining&quot;</span><span class="token punctuation">,</span> newRemaining <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;itemGroupCounter&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>catToSelect <span class="token operator">===</span> <span class="token string">&quot;spare&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;spareRemaining&quot;</span><span class="token punctuation">,</span> spareRemaining <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;itemGroupCounter&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// Update remaining items and reset counters</span></span>
<span class="line">      store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;itemGroupCounter&quot;</span><span class="token punctuation">,</span> itemGroupCounter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;catName&quot;</span><span class="token punctuation">,</span> catToSelect<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> previousItem <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;previousItem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> previousAnswer <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;previousAnswer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> nextStimulus <span class="token operator">=</span> clowder<span class="token punctuation">.</span><span class="token function">updateCatAndGetNextItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    catToSelect<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">catsToUpdate</span><span class="token operator">:</span> catToSelect <span class="token operator">?</span> <span class="token punctuation">[</span>catToSelect<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">items</span><span class="token operator">:</span> previousItem <span class="token operator">??</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">answers</span><span class="token operator">:</span> previousAnswer <span class="token operator">??</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">randomlySelectUnvalidated</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>nextStimulus <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;nextStimulus&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;nextStimulus&quot;</span><span class="token punctuation">,</span> nextStimulus<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// USE THIS IN CASE OF MULTIPLE BLOCKS</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// export const moveToNextBlock = () =&gt; {</span></span>
<span class="line"><span class="token comment">//   const catIndex = (store.session.get(&#39;currentCatIndex&#39;) ?? -1) + 1;</span></span>
<span class="line"><span class="token comment">//   store.session.set(&#39;subTaskName&#39;, catToSubTaskMap[catOrderMap[catIndex]]);</span></span>
<span class="line"><span class="token comment">//   store.session.set(&#39;currentCatIndex&#39;, catIndex);</span></span>
<span class="line"><span class="token comment">//   store.session.set(&#39;correctItems&#39;, []);</span></span>
<span class="line"><span class="token comment">//   store.session.set(&#39;incorrectItems&#39;, []);</span></span>
<span class="line"><span class="token comment">//   store.session.set(&#39;trialNumSubtask&#39;, 0); // counter for trials in subtask</span></span>
<span class="line"><span class="token comment">// };</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-stimulus-control-experiment-trials-setup-js" tabindex="-1"><a class="header-anchor" href="#_4-stimulus-control-experiment-trials-setup-js"><span>4. **Stimulus Control (<code>experiment/trials/setup.js</code>) **</span></a></h3><ul><li>import <code>setNextStimulus</code> from <code>experiment/experimentHelpers</code></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> setNextStimulus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../experimentHelpers&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Call <code>setNextStimulus</code> on setSurveyData</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> setupSurveyData <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">onFinish</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setNextStimulus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">onFinish</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setNextStimulus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_5-fetch-and-parse-corpus-for-clowder-config-corpus-js" tabindex="-1"><a class="header-anchor" href="#_5-fetch-and-parse-corpus-for-clowder-config-corpus-js"><span>5. <strong>Fetch and Parse Corpus for Clowder (<code>config/corpus.js</code>)</strong></span></a></h3><ul><li>Add the needed rows to the corpus handler</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Add CAT corpus-specific columns if in CAT mode</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">transformCSV</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">csvInput</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> accum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  csvInput<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> newRow <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>row <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token string">&quot;total&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;core&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;new&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;spare&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;practice&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">op</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">suffix</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>op<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>suffix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">        newRow<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> row<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    accum<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newRow<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> accum<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>📝 <strong>NOTE:</strong> Multichoice has two transformCSV functions one for Morphology and the other for CVA. So remember to add these to both functions.</p></blockquote><hr>`,28)]))}const i=s(t,[["render",o],["__file","multichoice-clowder.html.vue"]]),u=JSON.parse('{"path":"/developer/clowder-implementation/multichoice-clowder.html","title":"Multichoice - Clowder","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"1. Parameter Extraction from URL (serve/serve.js)","slug":"_1-parameter-extraction-from-url-serve-serve-js","link":"#_1-parameter-extraction-from-url-serve-serve-js","children":[]},{"level":3,"title":"2. Initialize Clowder in the Store Session (experiment/config/config.js)","slug":"_2-initialize-clowder-in-the-store-session-experiment-config-config-js","link":"#_2-initialize-clowder-in-the-store-session-experiment-config-config-js","children":[]},{"level":3,"title":"3. Create CATs and Clowder (experiment/experimentSetup.js)","slug":"_3-create-cats-and-clowder-experiment-experimentsetup-js","link":"#_3-create-cats-and-clowder-experiment-experimentsetup-js","children":[]},{"level":3,"title":"4. **Stimulus Control (experiment/trials/setup.js) **","slug":"_4-stimulus-control-experiment-trials-setup-js","link":"#_4-stimulus-control-experiment-trials-setup-js","children":[]},{"level":3,"title":"5. Fetch and Parse Corpus for Clowder (config/corpus.js)","slug":"_5-fetch-and-parse-corpus-for-clowder-config-corpus-js","link":"#_5-fetch-and-parse-corpus-for-clowder-config-corpus-js","children":[]}],"git":{"updatedTime":1745884739000,"contributors":[{"name":"emily-ejag","username":"emily-ejag","email":"emily.artegar@gmail.com","commits":3,"url":"https://github.com/emily-ejag"}]},"filePathRelative":"developer/clowder-implementation/multichoice-clowder.md"}');export{i as comp,u as data};
