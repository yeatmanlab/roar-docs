import{_ as a,c as r,d as n,o as t}from"./app-ZiMnF_K1.js";const s={};function i(o,e){return t(),r("div",null,e[0]||(e[0]=[n('<h1 id="synccleveruser" tabindex="-1"><a class="header-anchor" href="#synccleveruser"><span>syncCleverUser()</span></a></h1><h4 id="synccleveruser-getcleveruser" tabindex="-1"><a class="header-anchor" href="#synccleveruser-getcleveruser"><span><a href="https://github.com/yeatmanlab/roar-firebase-functions/blob/e784650492722d24069aa9b0704d1873ea5dafee/gse-roar-admin/functions/src/index.ts#L103" target="_blank" rel="noopener noreferrer">syncCleverUser</a>, <a href="https://github.com/yeatmanlab/roar-firebase-functions/blob/e784650492722d24069aa9b0704d1873ea5dafee/gse-roar-admin/functions/src/users/clever-sync-user.ts#L411" target="_blank" rel="noopener noreferrer">getCleverUser</a></span></a></h4><h3 id="function-name" tabindex="-1"><a class="header-anchor" href="#function-name"><span>Function Name</span></a></h3><p><code>syncCleverUser</code></p><h4 id="_1-synccleveruser" tabindex="-1"><a class="header-anchor" href="#_1-synccleveruser"><span>1. <strong>syncCleverUser</strong></span></a></h4><p>This callable Cloud Function acts as an entry point for client applications to initiate the synchronization process of user data from Clever.</p><h5 id="trigger" tabindex="-1"><a class="header-anchor" href="#trigger"><span>Trigger</span></a></h5><ul><li><strong>Type</strong>: Callable function.</li><li><strong>Authentication</strong>: Requires users to be authenticated; accesses the user&#39;s UID through <code>request.auth.uid</code>.</li></ul><h5 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h5><ul><li><strong>request</strong>: Contains the necessary credentials and identifiers to fetch and synchronize user data: <ul><li><code>assessmentUid</code>: UID used within the assessment Firebase project.</li><li><code>accessToken</code>: Access token for authenticating requests to the Clever API.</li></ul></li></ul><h5 id="operation" tabindex="-1"><a class="header-anchor" href="#operation"><span>Operation</span></a></h5><ul><li>Extracts the authenticated user&#39;s UID and other necessary parameters from the request.</li><li>Calls the <code>getCleverUser</code> function to perform the actual data synchronization process.</li></ul><h4 id="_2-getcleveruser" tabindex="-1"><a class="header-anchor" href="#_2-getcleveruser"><span>2. <strong>getCleverUser</strong></span></a></h4><p>A backend utility function that handles the actual interaction with the Clever API, retrieves user data, and updates Firebase Authentication and Firestore accordingly.</p><h5 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h5><ul><li><strong>roarUid</strong>: ROAR-specific user identifier.</li><li><strong>adminUid</strong>: Administrator UID in the Firebase admin project.</li><li><strong>assessmentUid</strong>: UID used within the assessment Firebase project.</li><li><strong>accessToken</strong>: Token used to authenticate requests to the Clever API.</li></ul><h5 id="operation-1" tabindex="-1"><a class="header-anchor" href="#operation-1"><span>Operation</span></a></h5><ul><li>Configures API requests and fetches user data from Clever.</li><li>Processes the retrieved data to update Firebase Authentication custom claims and Firestore documents across both admin and assessment projects.</li></ul><h3 id="detailed-workflow" tabindex="-1"><a class="header-anchor" href="#detailed-workflow"><span>Detailed Workflow</span></a></h3><ol><li><p><strong>Authentication and API Setup</strong>:</p><ul><li>Configures Axios for API requests to Clever using the provided <code>accessToken</code>.</li><li>Establishes Firebase and Firestore instances for necessary database interactions.</li></ul></li><li><p><strong>Data Retrieval from Clever</strong>:</p><ul><li>Fetches user data from Clever using the <code>/me</code> endpoint and follows links to specific user resources.</li><li>Extracts and logs user data for further processing.</li></ul></li><li><p><strong>Firebase Data Processing</strong>:</p><ul><li>Runs transactions to ensure atomic updates across Firebase services.</li><li>Updates custom claims and Firestore documents to reflect the latest user data from Clever.</li><li>Conditionally handles data based on whether the operation pertains to the admin or assessment database.</li></ul></li><li><p><strong>Role-Specific Data Handling</strong>:</p><ul><li>Processes user roles from Clever to update Firebase data accordingly, utilizing role mappings and custom logic to handle administrative and educational data specifically.</li><li>Uses transactions to update Firestore documents, ensuring data consistency and reliability.</li></ul></li></ol><h3 id="error-handling-and-security-considerations" tabindex="-1"><a class="header-anchor" href="#error-handling-and-security-considerations"><span>Error Handling and Security Considerations</span></a></h3><ul><li><p><strong>Error Handling</strong>:</p><ul><li>Implements comprehensive error handling throughout the API interaction and data processing stages.</li><li>Catches and logs errors related to API failures, Firebase operations, and data integrity issues.</li></ul></li><li><p><strong>Security</strong>:</p><ul><li>Ensures all operations are performed under strict authentication checks to prevent unauthorized access.</li><li>Validates and sanitizes incoming data from Clever to prevent injection attacks and ensure data integrity.</li></ul></li></ul><h3 id="deployment-and-maintenance" tabindex="-1"><a class="header-anchor" href="#deployment-and-maintenance"><span>Deployment and Maintenance</span></a></h3><p>This function is deployed automatically using GitHub actions, whenever changes are merged into the <code>main</code> branch.</p>',24)]))}const c=a(s,[["render",i],["__file","sync-clever-user.html.vue"]]),d=JSON.parse('{"path":"/developer/cloud-functions/gse-roar-admin/sync-clever-user.html","title":"syncCleverUser()","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Function Name","slug":"function-name","link":"#function-name","children":[]},{"level":3,"title":"Detailed Workflow","slug":"detailed-workflow","link":"#detailed-workflow","children":[]},{"level":3,"title":"Error Handling and Security Considerations","slug":"error-handling-and-security-considerations","link":"#error-handling-and-security-considerations","children":[]},{"level":3,"title":"Deployment and Maintenance","slug":"deployment-and-maintenance","link":"#deployment-and-maintenance","children":[]}],"git":{"updatedTime":1743546779000,"contributors":[{"name":"Elijah Kelly","username":"Elijah Kelly","email":"kellyel@stanford.edu","commits":1,"url":"https://github.com/Elijah Kelly"},{"name":"Kyle Montville","username":"Kyle Montville","email":"kmontvil@stanford.edu","commits":1,"url":"https://github.com/Kyle Montville"},{"name":"Adam Richie-Halford","username":"Adam Richie-Halford","email":"richford@users.noreply.github.com","commits":1,"url":"https://github.com/Adam Richie-Halford"},{"name":"Kyle","username":"Kyle","email":"ksmontville@gmail.com","commits":1,"url":"https://github.com/Kyle"}]},"filePathRelative":"developer/cloud-functions/gse-roar-admin/sync-clever-user.md"}');export{c as comp,d as data};
