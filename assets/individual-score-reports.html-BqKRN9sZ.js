import{_ as r,c as i,d as t,e as s,o,r as n}from"./app-BLIgrNMv.js";const d={};function l(c,e){const a=n("Mermaid");return o(),i("div",null,[e[0]||(e[0]=t('<h1 id="individual-score-reports-technical-specification" tabindex="-1"><a class="header-anchor" href="#individual-score-reports-technical-specification"><span>Individual Score Reports: Technical Specification</span></a></h1><h2 id="purpose" tabindex="-1"><a class="header-anchor" href="#purpose"><span>Purpose</span></a></h2><p>This page displays a printable, interactive individual score report for a single student, summarising ROAR task results, context data, and guidance. It is encapsulated in a single file component <code>src/pages/StudentReport.vue</code>.</p><h2 id="entry-routing" tabindex="-1"><a class="header-anchor" href="#entry-routing"><span>Entry &amp; Routing</span></a></h2><p>The route path (defined elsewhere in <code>src/router/index.js</code>) passes four props:</p><table><thead><tr><th>Prop Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>administrationId</td><td>string</td><td>testing window / group</td></tr><tr><td>userId</td><td>string</td><td>student UID</td></tr><tr><td>orgType</td><td>string</td><td>&#39;district&#39;, &#39;school&#39;, &#39;class&#39;, etc.</td></tr><tr><td>orgId</td><td>string</td><td>organization UID</td></tr></tbody></table><p>The page is rendered only when the authenticated user&#39;s <code>roarfirekit.restConfig()</code> is ready in the Pinia auth store.</p><h2 id="data-acquisition-layer" tabindex="-1"><a class="header-anchor" href="#data-acquisition-layer"><span>Data-acquisition layer</span></a></h2><p>All data are fetched through composition-API query hooks that wrap vue-query:</p><ul><li><code>useUserDataQuery(userId)</code>: populates student profile (grade, name, class, etc.)</li><li><code>useAdministrationsQuery([administrationId])</code>: populates administration / assessment metadata.</li><li><code>useUserRunPageQuery(userId, administrationId, orgType, orgId)</code>: populates scored runs per task.</li><li><code>useTasksDictionaryQuery()</code>: populates dictionary of task metadata (public &amp; technical names).</li></ul><h2 id="reactive-state-helpers" tabindex="-1"><a class="header-anchor" href="#reactive-state-helpers"><span>Reactive state &amp; helpers</span></a></h2><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>expanded</td><td>boolean</td><td>whether accordions are globally opened.</td></tr><tr><td>exportLoading</td><td>boolean</td><td>disables PDF button during render.</td></tr><tr><td>tasks, formattedTasks, studentFirstName/LastName</td><td>computed</td><td>computed from query results.</td></tr><tr><td>getGradeWithSuffix</td><td>function</td><td>grade with suffix.</td></tr><tr><td>taskDisplayNames, extendedDescriptions, rawOnlyTasks, etc.</td><td>computed</td><td>come from @/helpers/reports.js.</td></tr></tbody></table><h2 id="layout-hierarchy" tabindex="-1"><a class="header-anchor" href="#layout-hierarchy"><span>Layout hierarchy</span></a></h2><p>Here we define the layout hierarchy of the page. All content is populated using i18n keys to support internationalization.</p><h3 id="header-individual-report-header" tabindex="-1"><a class="header-anchor" href="#header-individual-report-header"><span>Header (<code>#individual-report-header</code>)</span></a></h3><ul><li>Page title (i18n key <code>scoreReports.pageTitle</code>)</li><li>Student name (H2)</li><li>Info block: grade, class, and administration name.</li></ul><h3 id="action-banner-welcome-banner" tabindex="-1"><a class="header-anchor" href="#action-banner-welcome-banner"><span>Action Banner (<code>.welcome-banner</code>)</span></a></h3><ul><li>Greeting text (i18n key <code>scoreReports.welcome</code>)</li><li>Expand/Collapse button (toggles expansion state for all accordions)</li><li>Export PDF button (triggers the <code>exportToPdf</code> function)</li></ul><h3 id="empty-state-panel-individual-report-empty-state" tabindex="-1"><a class="header-anchor" href="#empty-state-panel-individual-report-empty-state"><span>Empty-state panel (<code>#individual-report-empty-state</code>)</span></a></h3><p>This panel is shown when the user has no tasks to display, i.e. when <code>taskData.length === 0</code>. It uses the i18n keys <code>scoreReports.stillWorking</code> and <code>scoreReports.needOneComplete</code> to inform the viewer that the student has not completed enough tasks to populate an individual score report.</p><h3 id="at-a-glance-banner-individual-report-banner" tabindex="-1"><a class="header-anchor" href="#at-a-glance-banner-individual-report-banner"><span>At-a-Glance Banner (<code>#individual-report-banner</code>)</span></a></h3><p>This banner is shown when the user has tasks to display. It uses the i18n keys <code>scoreReports.roarSummery</code> (sic) and <code>scoreReports.summery</code> (sic), as well as the <code>formattedTasks</code> computed property to display a high-level summary of the student&#39;s performance.</p><h3 id="task-cards-wrapper-individual-report-cards" tabindex="-1"><a class="header-anchor" href="#task-cards-wrapper-individual-report-cards"><span>Task cards wrapper (<code>#individual-report-cards</code>)</span></a></h3><h4 id="reportable-tasks" tabindex="-1"><a class="header-anchor" href="#reportable-tasks"><span>Reportable Tasks</span></a></h4><p>This wrapper contains a single <code>&lt;individual-score-report-task&gt;</code> component. This component is defined in the <code>IndividualScoreReportTask.vue</code> file and renders a card for each &quot;reportable task&quot;. A task is considered reportable if it has a defined <code>rawScore</code> in the <code>getScoreKeys</code> utility function defined in <code>src/helpers/reports.js</code>. Currently, the following tasks are reportable:</p><ul><li>swr, swr-es</li><li>pa, pa-es</li><li>letter, letter-es, letter-en-ca</li><li>sre, sre-es</li></ul><p>Other tasks may be added to the individual score report but they must define their own <code>rawScoreKey</code> in the <code>getScoreKeys</code> utility function defined in <code>src/helpers/reports.js</code>.</p><p>To onboard a new task to the score report:</p><ol><li><p>Implement <code>getScoreKeys(taskId, grade)</code> to return these keys:</p><ul><li><code>rawScoreKey</code> (composite score used as raw value)</li><li><code>percentileScoreKey</code> (optional)</li><li><code>standardScoreKey</code> (optional)</li></ul></li><li><p>Ensure the game writes those fields into <code>scores.composite</code> in the run payload.</p></li><li><p>Optional: add display metadata in <code>taskDisplayNames</code>, <code>extendedDescriptions</code>, and if required update helper thresholds.</p></li></ol><h4 id="tags" tabindex="-1"><a class="header-anchor" href="#tags"><span>Tags</span></a></h4><p>Each card renders tags indicating whether the task was required or optional and whether the run was reliable or unreliable. If the &quot;unreliable&quot; tag is rendered, a tooltip is added to the tag that explains the reasons for unreliability (i.e., the &quot;engagement flags&quot;).</p><h4 id="primary-knob" tabindex="-1"><a class="header-anchor" href="#primary-knob"><span>Primary Knob</span></a></h4><p>The primary gauge is a <a href="https://primevue.org/knob/" target="_blank" rel="noopener noreferrer">PrimeVue Knob</a> component that displays one of the three scores. The displayed score is chosed according to the following decision tree:</p>',33)),s(a,{id:"mermaid-323",code:"eJxNzLEKwjAUheHdpzhbp65OVtHGwcVJBwkdLs1Fi6EN9wZEyMMbiZae+T/fXSg8cDEr5O1tJH2eHJqmQeU5RpaqQ11vkW6sCQdrBg2e3hB6QftJuCvPEp2nhNZeNd8UmXaMDda70rQLyMxQYOl5jIPnpfdrv95xTjXS6EjcP/wA8qM6JQ=="}),e[1]||(e[1]=t('<p>The range color is always gray. The value color reflects the support category of the score. If support categories are not defined, the color is dark gray.</p><h4 id="score-description" tabindex="-1"><a class="header-anchor" href="#score-description"><span>Score Description</span></a></h4><p>After the primary knob, each card displays a description of the score. The description template depends on the score type chosen in the above decision tree.</p><ul><li>Raw task description: &quot;{firstName} achieved a composite score of {rawScore} in {taskName}. {taskDescription}&quot;,</li><li>Standard task description: &quot;{firstName} scored a standard score of {standardScore}, which indicates they {supportCategory} {taskName}. {taskDescription}&quot;,</li><li>Percentile task description: &quot;{firstName} scored in the {percentile}, which indicates they {supportCategory} {taskName}. {taskDescription}&quot;,</li></ul><p>where</p><ul><li><code>firstName</code> is the student&#39;s first name</li><li><code>rawScore</code> is the raw score</li><li><code>standardScore</code> is the standard score</li><li><code>percentile</code> is the percentile score</li><li><code>supportCategory</code> is the support category explanatory text: <ul><li>extra support text: &quot;need extra support in&quot;</li><li>developing text: &quot;are developing the skill of&quot;</li><li>achieved text: &quot;have achieved the skill of&quot;</li></ul></li><li><code>taskName</code> is the task name</li><li><code>taskDescription</code> is the extended task description: <ul><li>swr: &#39;This test measures your studentâ€™s skill in reading single words quickly and correctly.&#39;,</li><li>swr-es: &#39;This test measures how well a student can identify real words and made-up words. The goal is for students to recognize words quickly and accurately, a skill called decoding. High scores on this assessment indicate a readiness to be a skilled and fluent reader.&#39;,</li><li>pa: &#39;This test measures how well your student can break down a spoken word into its individual sounds and choose or create a word with the same sounds.&#39;,</li><li>sre: &#39;This test measures how quickly your student can silently read and understand sentences.&#39;,</li><li>vocab: &#39;This test measures how well your student knows words by having them match a picture to a spoken word.&#39;,</li><li>multichoice: &#39;Temporary description for multichoice&#39;,</li><li>morph: &#39;This test measures how well your student understands how parts of words, including prefixes and suffixes, can change the meaning of a word in a sentence&#39;,</li><li>cva: &#39;This test measures your studentsâ€™ knowledge of words that are often used in the books they read at school&#39;,</li><li>letter: &#39;This test measures how well your student knows the names of letters and which letters are used to spell each sound&#39;,</li><li>letter-en-ca: &#39;This test measures how well your student knows the names of letters and which letters are used to spell each sound&#39;,</li><li>letter-es: &#39;This test measures how well your student knows the names of letters and which letters are used to spell each sound&#39;,</li><li>comp: &#39;Temporary description for comp&#39;,</li><li>phonics: &#39;This test measures phonics knowledge by testing how well your student can match the sounds of a word to the spelling&#39;,</li><li>syntax: &#39;This test measures how well students understand sentences that vary from simple to complicated&#39;,</li><li>trog: &#39;This test measures how well students understand sentences that vary from simple to complicated&#39;,</li><li>fluency: &#39;Temporary description for fluency&#39;,</li><li>ran: &#39;Temporary description for ran&#39;,</li><li>crowding: &#39;Temporary description for crowding&#39;,</li><li>roav-mep: &#39;Temporary description for mep&#39;,</li><li>roar-readaloud: &#39;Temporary description for readaloud&#39;,</li></ul></li></ul><h4 id="score-breakdown" tabindex="-1"><a class="header-anchor" href="#score-breakdown"><span>Score Breakdown</span></a></h4><p>Each card contains a collapsible accordion that displays a breakdown of the score. This accordion is collapsed by default. The scores are shown in the following order (if defined):</p><ol><li><strong>Standard score</strong> (min - max): <strong>${value}</strong></li><li><strong>Raw score</strong> (min - max): <strong>${value}</strong></li><li><strong>Percentile score</strong> (min - max): <strong>${value}</strong></li></ol><p>For the Phoneme task, the following subscores are added:</p><ol><li><strong>First Sound Matching (FSM): ${value}</strong></li><li><strong>Last Sound Matching (LSM): ${value}</strong></li><li><strong>Deletion (DEL): ${value}</strong></li><li><strong>Skills to work on: ${either &quot;NONE&quot; or a list containing &quot;LSM&quot;, &quot;FSM&quot;, or &quot;DEL&quot;}</strong></li></ol><p>For the Letter task, the following subscores are added:</p><ol><li><strong>Lower Case</strong>: <strong>${value}</strong></li><li><strong>Upper Case</strong>: <strong>${value}</strong></li><li><strong>Letter Sounds</strong>: <strong>${value}</strong></li><li><strong>Letters to Work On</strong>: <strong>${value}</strong></li><li><strong>Letter Sounds to Work On</strong>: <strong>${value}</strong></li></ol><h3 id="support-graphic-next-steps-support-graphic" tabindex="-1"><a class="header-anchor" href="#support-graphic-next-steps-support-graphic"><span>Support Graphic / Next Steps (#support-graphic)</span></a></h3><p>After the array of assessment score cards, the individual report renders two accordions with a support graphic and definitions and a link to static PDF with next steps.</p><h3 id="internationalization" tabindex="-1"><a class="header-anchor" href="#internationalization"><span>Internationalization</span></a></h3><ul><li>All static copy is driven by i18n keys under the <code>scoreReports.*</code> namespace.</li></ul><h3 id="styling" tabindex="-1"><a class="header-anchor" href="#styling"><span>Styling</span></a></h3><ul><li>Scoped styles in both components, Tailwind utility classes, and PrimeVue theme variables.</li><li>Responsive via flexbox; the <code>.individual-report-wrapper</code> class wraps cards on smaller widths.</li></ul><h3 id="pdf-export" tabindex="-1"><a class="header-anchor" href="#pdf-export"><span>PDF Export</span></a></h3><ul><li>Ensures all accordions are expanded.</li><li>Uses <code>jsPDF</code>, <code>html2canvas</code>, and helper function <code>addElementToPdf</code></li><li>Renders the DOM sections in order: header, banner, card wrapper, support graphic.</li><li>Saves file IndividualScoreReport_<code>&lt;First&gt;&lt;Last&gt;</code>.pdf.</li></ul><h3 id="dependencies" tabindex="-1"><a class="header-anchor" href="#dependencies"><span>Dependencies</span></a></h3><ul><li>Vue 3 (script setup)</li><li>Pinia store (auth)</li><li>Vue-Query hooks (custom)</li><li>PrimeVue components: <code>PvButton</code>, <code>PvAccordion</code>, <code>PvKnob</code>, <code>PvTag</code>, <code>PvSpinner</code>.</li><li>jsPDF 2.x, html2canvas, lodash, @bdelab/roar-utils.</li></ul>',23))])}const h=r(d,[["render",l],["__file","individual-score-reports.html.vue"]]),u=JSON.parse('{"path":"/developer/tech-specs/frontend/individual-score-reports.html","title":"Individual Score Reports: Technical Specification","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Purpose","slug":"purpose","link":"#purpose","children":[]},{"level":2,"title":"Entry & Routing","slug":"entry-routing","link":"#entry-routing","children":[]},{"level":2,"title":"Data-acquisition layer","slug":"data-acquisition-layer","link":"#data-acquisition-layer","children":[]},{"level":2,"title":"Reactive state & helpers","slug":"reactive-state-helpers","link":"#reactive-state-helpers","children":[]},{"level":2,"title":"Layout hierarchy","slug":"layout-hierarchy","link":"#layout-hierarchy","children":[{"level":3,"title":"Header (#individual-report-header)","slug":"header-individual-report-header","link":"#header-individual-report-header","children":[]},{"level":3,"title":"Action Banner (.welcome-banner)","slug":"action-banner-welcome-banner","link":"#action-banner-welcome-banner","children":[]},{"level":3,"title":"Empty-state panel (#individual-report-empty-state)","slug":"empty-state-panel-individual-report-empty-state","link":"#empty-state-panel-individual-report-empty-state","children":[]},{"level":3,"title":"At-a-Glance Banner (#individual-report-banner)","slug":"at-a-glance-banner-individual-report-banner","link":"#at-a-glance-banner-individual-report-banner","children":[]},{"level":3,"title":"Task cards wrapper (#individual-report-cards)","slug":"task-cards-wrapper-individual-report-cards","link":"#task-cards-wrapper-individual-report-cards","children":[]},{"level":3,"title":"Support Graphic / Next Steps (#support-graphic)","slug":"support-graphic-next-steps-support-graphic","link":"#support-graphic-next-steps-support-graphic","children":[]},{"level":3,"title":"Internationalization","slug":"internationalization","link":"#internationalization","children":[]},{"level":3,"title":"Styling","slug":"styling","link":"#styling","children":[]},{"level":3,"title":"PDF Export","slug":"pdf-export","link":"#pdf-export","children":[]},{"level":3,"title":"Dependencies","slug":"dependencies","link":"#dependencies","children":[]}]}],"git":{"updatedTime":1753185986000,"contributors":[{"name":"Adam Richie-Halford","username":"Adam Richie-Halford","email":"richford@users.noreply.github.com","commits":1,"url":"https://github.com/Adam Richie-Halford"}]},"filePathRelative":"developer/tech-specs/frontend/individual-score-reports.md"}');export{h as comp,u as data};
