import{_ as t,r as i,o as n,c as s,a as e,b as o,d as r,e as l}from"./app-CiunZUYm.js";const c={},d=e("h1",{id:"mirrorcustomclaims",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mirrorcustomclaims"},[e("span",null,"mirrorCustomClaims")])],-1),m={id:"mirrorcustomclaims-1",tabindex:"-1"},h={class:"header-anchor",href:"#mirrorcustomclaims-1"},u={href:"https://github.com/yeatmanlab/roar-firebase-functions/blob/3b169713da20eecc55fb6365f555f984706799c7/gse-roar-admin/functions/src/index.ts#L928",target:"_blank",rel:"noopener noreferrer"},p=l('<h3 id="function-name" tabindex="-1"><a class="header-anchor" href="#function-name"><span>Function Name</span></a></h3><p><code>mirrorCustomClaims</code></p><h4 id="mirrorcustomclaims-2" tabindex="-1"><a class="header-anchor" href="#mirrorcustomclaims-2"><span><strong>mirrorCustomClaims</strong></span></a></h4><p>This Cloud Function triggers on document changes in the <code>userClaims</code> collection. It ensures that any updates to claims are accurately reflected in Firebase Authentication custom claims and corresponding Firestore documents in both the admin and assessment databases.</p><h5 id="trigger" tabindex="-1"><a class="header-anchor" href="#trigger"><span>Trigger</span></a></h5><ul><li><strong>Type</strong>: Document written (includes created, updated, or deleted).</li><li><strong>Path</strong>: <code>userClaims/{targetUid}</code></li></ul><h5 id="operation" tabindex="-1"><a class="header-anchor" href="#operation"><span>Operation</span></a></h5><ul><li>Checks for data existence and manages data integrity to avoid processing deletions or irrelevant updates.</li><li>Synchronizes custom claims across Firebase Authentication in both admin and assessment projects.</li><li>Updates Firestore documents based on the roles defined in the claims, particularly for administrative roles.</li></ul><h3 id="detailed-workflow" tabindex="-1"><a class="header-anchor" href="#detailed-workflow"><span>Detailed Workflow</span></a></h3><ol><li><p><strong>Preliminary Checks</strong>:</p><ul><li>Verifies that the snapshot exists to avoid processing deletions or null data.</li><li>Skips updates triggered by changes to the <code>lastUpdated</code> field to prevent infinite loops.</li></ul></li><li><p><strong>Data Processing</strong>:</p><ul><li>Extracts current and previous claims data from the document snapshot.</li><li>Identifies if the document was deleted and skips further processing if true.</li></ul></li><li><p><strong>Custom Claims Synchronization</strong>:</p><ul><li>Filters and prepares custom claims for synchronization, removing any admin organization specifics that should not be in Firebase Authentication custom claims.</li><li>Serializes the claims and checks for size constraints to ensure they don&#39;t exceed Firebase&#39;s custom claims size limit.</li><li>Updates Firebase Authentication custom claims for both admin and assessment UIDs associated with the user.</li></ul></li><li><p><strong>Firestore Document Updates</strong>:</p><ul><li>In case of administrative privileges (either super_admin or having administrative organizations), performs additional data checks and updates: <ul><li>Retrieves and sets exhaustive and minimal administrative organizations from Firestore transactions.</li><li>Updates the user&#39;s type to &quot;admin&quot; in Firestore documents if applicable.</li><li>Ensures that the changes are reflected in both admin and assessment Firestore databases.</li></ul></li></ul></li><li><p><strong>Error Handling and Security Considerations</strong>:</p><ul><li>Implements error logging for significant steps and potential failure points, particularly during API calls and database transactions.</li><li>Ensures that operations are secure and consistent, utilizing transactions for all Firestore updates to maintain atomicity.</li></ul></li></ol><h3 id="deployment-and-maintenance" tabindex="-1"><a class="header-anchor" href="#deployment-and-maintenance"><span>Deployment and Maintenance</span></a></h3><p>This function is deployed automatically using GitHub actions, whenever changes are merged into the <code>main</code> branch.</p><h3 id="potential-enhancements" tabindex="-1"><a class="header-anchor" href="#potential-enhancements"><span>Potential Enhancements</span></a></h3><ul><li><strong>Optimization of Data Checks</strong>: Refine the checks for data changes to minimize unnecessary executions and optimize database operations.</li><li><strong>Enhanced Role Management</strong>: Implement more granular role and permission checks to handle complex organizational hierarchies and permissions.</li></ul>',14);function g(f,b){const a=i("ExternalLinkIcon");return n(),s("div",null,[d,e("h4",m,[e("a",h,[e("span",null,[e("a",u,[o("mirrorCustomClaims"),r(a)])])])]),p])}const k=t(c,[["render",g],["__file","mirror-custom-claims.html.vue"]]),v=JSON.parse('{"path":"/cloud-functions/gse-roar-admin/mirror-custom-claims.html","title":"mirrorCustomClaims","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Function Name","slug":"function-name","link":"#function-name","children":[]},{"level":3,"title":"Detailed Workflow","slug":"detailed-workflow","link":"#detailed-workflow","children":[]},{"level":3,"title":"Deployment and Maintenance","slug":"deployment-and-maintenance","link":"#deployment-and-maintenance","children":[]},{"level":3,"title":"Potential Enhancements","slug":"potential-enhancements","link":"#potential-enhancements","children":[]}],"git":{"updatedTime":1714409897000,"contributors":[{"name":"Kyle","email":"ksmontville@gmail.com","commits":1},{"name":"Kyle Montville","email":"kmontvil@stanford.edu","commits":1}]},"filePathRelative":"cloud-functions/gse-roar-admin/mirror-custom-claims.md"}');export{k as comp,v as data};
