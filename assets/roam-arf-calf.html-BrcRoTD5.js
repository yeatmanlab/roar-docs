import{_ as n,c as a,d as p,o as t}from"./app-DJ04AWGL.js";const e={};function o(l,s){return t(),a("div",null,s[0]||(s[0]=[p(`<h1 id="arf-calf-clowder" tabindex="-1"><a class="header-anchor" href="#arf-calf-clowder"><span>ARF &amp; CALF - Clowder</span></a></h1><blockquote><p>üìù <strong>NOTE:</strong> ROAM apps will use the URL param <code>mode=cat</code> to switch between adaptive and non-adaptive modes.</p></blockquote><h3 id="_1-fetch-and-parse-corpus-for-clowder-tasks-fluency-helpers-fetchandparsecorpus-js" tabindex="-1"><a class="header-anchor" href="#_1-fetch-and-parse-corpus-for-clowder-tasks-fluency-helpers-fetchandparsecorpus-js"><span>1. <strong>Fetch and Parse Corpus for Clowder (<code>tasks/fluency/helpers/fetchAndParseCorpus.js</code>)</strong></span></a></h3><ul><li>Add the needed rows to the corpus handler</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Add CAT corpus-specific columns if in CAT mode</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>userMode <span class="token operator">===</span> <span class="token string">&quot;cat&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token punctuation">[</span><span class="token string">&quot;sum&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;minus&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mult&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;total&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">op</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">suffix</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          newRow<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>op<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>suffix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>op<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>suffix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Select the corpus for clowder</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>userMode <span class="token operator">===</span> <span class="token string">&quot;cat&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">block0</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">link to block 0 order</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>	    </span>
<span class="line">    corpusLocation <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">fluencyArf</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">order</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">block0</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">block 0 link for arf</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">stimulus</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">link for items-all-cat.csv</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">practice</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">link for items-practice-cat.csv</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span>	      </span>
<span class="line">    <span class="token comment">// more locations</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// more apps location</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Initialize Clowder</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>userMode <span class="token operator">===</span> <span class="token string">&quot;cat&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">initializeClowder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">initializeClowder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">// Define the \`cats\` configuration</span></span>
<span class="line"><span class="token keyword">const</span> catsConfig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">sum</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;MLE&quot;</span><span class="token punctuation">,</span> <span class="token comment">// EAP</span></span>
<span class="line">        <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&quot;itemSelect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&quot;seed-sum&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">minus</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;MLE&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&quot;itemSelect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&quot;seed-minus&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">mult</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;MLE&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&quot;itemSelect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&quot;seed-mult&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">div</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;MLE&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&quot;itemSelect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&quot;seed-div&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;MLE&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&quot;itemSelect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&quot;seed-total&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Prepare corpus and create a new instance of Clowder</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// USE THIS EXAMPLE TO GET EARLY STOPPING CATS -- REMEMBER TO IMPORT FUNCTIONS FROM CLOWDER AS NEEDED</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// if (store.session.get(&#39;config&#39;).earlyStopping) {</span></span>
<span class="line">  <span class="token comment">// earlyStoppingCats = new StopAfterNItems({</span></span>
<span class="line">  <span class="token comment">//   requiredItems: {</span></span>
<span class="line">  <span class="token comment">//     sum:  5,</span></span>
<span class="line">  <span class="token comment">//     minus: 5,</span></span>
<span class="line">  <span class="token comment">//     div: 15,</span></span>
<span class="line">  <span class="token comment">//     mult: 15,</span></span>
<span class="line">  <span class="token comment">//   },</span></span>
<span class="line">  <span class="token comment">//   logicalOperation: &#39;only&#39;,</span></span>
<span class="line">  <span class="token comment">// });</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> corpusClowder <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;corpusAll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&quot;stimulus&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;block0&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> clowderCorpus <span class="token operator">=</span> <span class="token function">prepareClowderCorpus</span><span class="token punctuation">(</span></span>
<span class="line">    corpusClowder<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token string">&quot;sum&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;minus&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mult&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;total&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/* In the case of ROAM there are 2 separate stimulus files, </span>
<span class="line">    one for practice and the other one for stimuli test, we need to add the zetas</span>
<span class="line">    in the corresponding block -- we are not using a cat for practice */</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> corpusWithClowder <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;corpusAll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  corpusWithClowder<span class="token punctuation">.</span>stimulus<span class="token punctuation">.</span>block0 <span class="token operator">=</span> clowderCorpus<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;corpusAll&quot;</span><span class="token punctuation">,</span> corpusWithClowder<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  clowder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clowder</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">cats</span><span class="token operator">:</span> catsConfig<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">corpus</span><span class="token operator">:</span> corpusWithClowder<span class="token punctuation">.</span>stimulus<span class="token punctuation">.</span>block0<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>randomSeed <span class="token operator">??</span> <span class="token string">&quot;random-seed&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// earlyStopping: earlyStoppingCats, --- use this if early stopping is needed</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-update-the-stimulus-for-clowder-tasks-shared-helpers-updatestimulus-js" tabindex="-1"><a class="header-anchor" href="#_2-update-the-stimulus-for-clowder-tasks-shared-helpers-updatestimulus-js"><span>2. <strong>Update the stimulus for Clowder (<code>tasks/shared/helpers/updateStimulus.js</code>)</strong></span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> clowder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../../fluency/helpers/fetchAndParseCorpus&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> catOrderMap <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&quot;sum&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;minus&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&quot;mult&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">getNextStimulus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">corpusName</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> corpus<span class="token punctuation">,</span> nextStimulus<span class="token punctuation">,</span> remainingStimuli<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// read the current version of the corpus</span></span>
<span class="line">  corpus <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;currentCorpus&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span></span>
<span class="line">    store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>userMode <span class="token operator">===</span> <span class="token string">&quot;cat&quot;</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">    corpusName <span class="token operator">===</span> <span class="token string">&quot;stimulus&quot;</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> catIndex <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;currentCatIndex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>catIndex <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;currentCatIndex&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      catIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> catName <span class="token operator">=</span> catOrderMap<span class="token punctuation">[</span>catIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> previousItem <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;previousItem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> previousAnswer <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;previousAnswer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> nextStimulus <span class="token operator">=</span> clowder<span class="token punctuation">.</span><span class="token function">updateCatAndGetNextItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">catToSelect</span><span class="token operator">:</span> catName<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">catsToUpdate</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;total&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sum&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;minus&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mult&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">items</span><span class="token operator">:</span> previousItem <span class="token operator">??</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">answers</span><span class="token operator">:</span> previousAnswer <span class="token operator">??</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">randomlySelectUnvalidated</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextStimulus <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;nextStimulus&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> catIndex <span class="token operator">=</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;currentCatIndex&quot;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">      store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;currentCatIndex&quot;</span><span class="token punctuation">,</span> catIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>catIndex <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">getNextStimulus</span><span class="token punctuation">(</span>corpusName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;nextStimulus&quot;</span><span class="token punctuation">,</span> nextStimulus<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    nextStimulus <span class="token operator">=</span> corpus<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// get the remaining stimuli</span></span>
<span class="line">    remainingStimuli <span class="token operator">=</span> corpus<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// store the item for use in the trial</span></span>
<span class="line">    store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;nextStimulus&quot;</span><span class="token punctuation">,</span> nextStimulus<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// update the corpus with the remaining unused items</span></span>
<span class="line">    corpus <span class="token operator">=</span> remainingStimuli<span class="token punctuation">;</span></span>
<span class="line">    store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;currentCorpus&quot;</span><span class="token punctuation">,</span> corpus<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-save-previous-items-and-responses-tasks-responsemodalitystudy-trials-responsetimeblock-js" tabindex="-1"><a class="header-anchor" href="#_3-save-previous-items-and-responses-tasks-responsemodalitystudy-trials-responsetimeblock-js"><span>3. Save previous items and responses (<code>tasks/responseModalityStudy/trials/responseTimeBlock.js</code>)</span></a></h3><ul><li>Since we are only updating from the stimulus corpus names, we need to save the previous seen items and answers from the stimulus block</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>corpusName <span class="token operator">===</span> <span class="token string">&quot;stimulus&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;previousItem&quot;</span><span class="token punctuation">,</span> stimulus<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;previousAnswer&quot;</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;dataCorrect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17)]))}const i=n(e,[["render",o],["__file","roam-arf-calf.html.vue"]]),u=JSON.parse('{"path":"/developer/clowder-implementation/roam-arf-calf.html","title":"ARF & CALF - Clowder","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"1. Fetch and Parse Corpus for Clowder (tasks/fluency/helpers/fetchAndParseCorpus.js)","slug":"_1-fetch-and-parse-corpus-for-clowder-tasks-fluency-helpers-fetchandparsecorpus-js","link":"#_1-fetch-and-parse-corpus-for-clowder-tasks-fluency-helpers-fetchandparsecorpus-js","children":[]},{"level":3,"title":"2. Update the stimulus for Clowder (tasks/shared/helpers/updateStimulus.js)","slug":"_2-update-the-stimulus-for-clowder-tasks-shared-helpers-updatestimulus-js","link":"#_2-update-the-stimulus-for-clowder-tasks-shared-helpers-updatestimulus-js","children":[]},{"level":3,"title":"3. Save previous items and responses (tasks/responseModalityStudy/trials/responseTimeBlock.js)","slug":"_3-save-previous-items-and-responses-tasks-responsemodalitystudy-trials-responsetimeblock-js","link":"#_3-save-previous-items-and-responses-tasks-responsemodalitystudy-trials-responsetimeblock-js","children":[]}],"git":{"updatedTime":1743546779000,"contributors":[{"name":"Elijah Kelly","username":"Elijah Kelly","email":"kellyel@stanford.edu","commits":1,"url":"https://github.com/Elijah Kelly"},{"name":"emily-ejag","username":"emily-ejag","email":"emily.artegar@gmail.com","commits":1,"url":"https://github.com/emily-ejag"}]},"filePathRelative":"developer/clowder-implementation/roam-arf-calf.md"}');export{i as comp,u as data};
