import{_ as i,c as n,d as l,o as a}from"./app-BalnT9IK.js";const r={};function t(s,e){return a(),n("div",null,e[0]||(e[0]=[l('<h1 id="backend-architecture-in-roar" tabindex="-1"><a class="header-anchor" href="#backend-architecture-in-roar"><span>Backend Architecture in ROAR</span></a></h1><p>ROAR implements a Repository Pattern Architecture (also known as Clean Architecture) to establish a clear separation of concerns and maintain scalable data operations.</p><h2 id="core-principles" tabindex="-1"><a class="header-anchor" href="#core-principles"><span>Core Principles</span></a></h2><h3 id="dependency-injection" tabindex="-1"><a class="header-anchor" href="#dependency-injection"><span>Dependency Injection</span></a></h3><p>The architecture leverages dependency injection to achieve loose coupling between components. Dependencies are supplied through interfaces, enabling:</p><ul><li>Easier unit testing through dependency mocking</li><li>Flexible component replacement without affecting the broader application</li><li>Clear contract definitions between components</li></ul><h3 id="dependency-inversion-principle-dip" tabindex="-1"><a class="header-anchor" href="#dependency-inversion-principle-dip"><span>Dependency Inversion Principle (DIP)</span></a></h3><p>Following DIP, high-level modules don&#39;t depend on low-level modules - both depend on abstractions. This is implemented through interfaces that define component contracts, with concrete classes providing the actual implementations.</p><h2 id="architectural-layers" tabindex="-1"><a class="header-anchor" href="#architectural-layers"><span>Architectural Layers</span></a></h2><h3 id="_1-domain-model-layer" tabindex="-1"><a class="header-anchor" href="#_1-domain-model-layer"><span>1. Domain (Model) Layer</span></a></h3><p>Defines the core business entities and their behaviors through interfaces. These models establish contracts for data operations throughout the application.</p><p>Core Domain Models:</p><ul><li>Administration</li><li>Assignment</li><li>Class</li><li>District</li><li>Family</li><li>Identity Provider</li><li>Group</li><li>Legal</li><li>Run</li><li>School</li><li>Score</li><li>Task</li><li>Trial</li><li>User Claim</li><li>User</li><li>Variant</li></ul><h3 id="_2-repository-layer" tabindex="-1"><a class="header-anchor" href="#_2-repository-layer"><span>2. Repository Layer</span></a></h3><p>Acts as a data access abstraction layer that:</p><ul><li>Encapsulates data access logic</li><li>Provides a consistent interface regardless of data source</li><li>Maintains single responsibility per entity</li><li>Defines explicit contracts between frontend and backend</li><li>Handles CRUD operations for specific entities</li></ul><h3 id="_3-service-layer" tabindex="-1"><a class="header-anchor" href="#_3-service-layer"><span>3. Service Layer</span></a></h3><p>Implements business logic by:</p><ul><li>Orchestrating operations across repositories</li><li>Processing domain entities</li><li>Remaining data source agnostic</li><li>Enforcing business rules and workflows</li><li>Coordinating complex operations across multiple repositories</li></ul><h3 id="_4-controller-layer" tabindex="-1"><a class="header-anchor" href="#_4-controller-layer"><span>4. Controller Layer</span></a></h3><p>Manages HTTP communication by:</p><ul><li>Handling incoming API requests</li><li>Validating request data</li><li>Coordinating with appropriate services</li><li>Formatting API responses</li><li>Maintaining REST best practices</li></ul><h2 id="benefits" tabindex="-1"><a class="header-anchor" href="#benefits"><span>Benefits</span></a></h2><p>This architecture provides:</p><ul><li>Clear separation of concerns</li><li>Improved testability</li><li>Flexible data source switching</li><li>Scalable and maintainable codebase</li><li>Consistent data access patterns</li></ul>',25)]))}const o=i(r,[["render",t],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/developer/backend-architecture/architecture/","title":"Backend Architecture in ROAR","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Core Principles","slug":"core-principles","link":"#core-principles","children":[{"level":3,"title":"Dependency Injection","slug":"dependency-injection","link":"#dependency-injection","children":[]},{"level":3,"title":"Dependency Inversion Principle (DIP)","slug":"dependency-inversion-principle-dip","link":"#dependency-inversion-principle-dip","children":[]}]},{"level":2,"title":"Architectural Layers","slug":"architectural-layers","link":"#architectural-layers","children":[{"level":3,"title":"1. Domain (Model) Layer","slug":"_1-domain-model-layer","link":"#_1-domain-model-layer","children":[]},{"level":3,"title":"2. Repository Layer","slug":"_2-repository-layer","link":"#_2-repository-layer","children":[]},{"level":3,"title":"3. Service Layer","slug":"_3-service-layer","link":"#_3-service-layer","children":[]},{"level":3,"title":"4. Controller Layer","slug":"_4-controller-layer","link":"#_4-controller-layer","children":[]}]},{"level":2,"title":"Benefits","slug":"benefits","link":"#benefits","children":[]}],"git":{"updatedTime":1744664883000,"contributors":[{"name":"Kyle","username":"Kyle","email":"ksmontville@gmail.com","commits":3,"url":"https://github.com/Kyle"}]},"filePathRelative":"developer/backend-architecture/architecture/README.md"}');export{o as comp,d as data};
