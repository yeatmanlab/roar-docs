import{_ as t,c as a,d as s,o as i}from"./app-DWlrwlPs.js";const n={};function o(r,e){return i(),a("div",null,e[0]||(e[0]=[s(`<h1 id="database-implementations" tabindex="-1"><a class="header-anchor" href="#database-implementations"><span>Database Implementations</span></a></h1><p>The ROAR platform backend architecture is designed to support multiple database implementations. This is achieved through the use of a flexible and extensible data model that can be easily adapted to different database systems. The architecture also includes a set of standardized APIs that allow developers to interact with the data in a consistent and predictable way, regardless of the underlying database implementation.</p><p>Each backend implementation is instantiated using a factory pattern, which allows for easy creation and management of database connections. The factory pattern also provides a level of abstraction between the backend implementation and the rest of the application, making it easier to switch between different database systems without affecting the rest of the codebase.</p><h2 id="firebase-implementation" tabindex="-1"><a class="header-anchor" href="#firebase-implementation"><span>Firebase Implementation</span></a></h2><p>The Firebase implementation uses Firebase Firestore and Google Cloud Functions for serverless backend services. This implementation is created using the <code>createFirestoreImplementation()</code> factory function from the <code>@roar-firebase-functions/core</code> package.</p><h3 id="implementation-structure" tabindex="-1"><a class="header-anchor" href="#implementation-structure"><span>Implementation Structure</span></a></h3><p>The Firestore implementation contains the following components:</p><ul><li><p><strong>Repository Classes</strong>: Specialized data access classes for different entity types:</p><ul><li><code>FirestoreAdministrationRepository</code></li><li><code>FirestoreIdentityProviderRepository</code></li><li><code>FirestoreOrgRepository</code></li><li><code>FirestoreUserRepository</code></li><li><code>FirestoreUserClaimRepository</code></li><li><code>FirestoreBaseRepository</code> (base class with common functionality)</li></ul></li><li><p><strong>Service Classes</strong>: Business logic layers that use repositories:</p><ul><li><code>AdministrationService</code></li><li><code>IdentityProviderService</code></li></ul></li><li><p><strong>Filter Adapters</strong>: Tools for converting abstract filter conditions to Firestore-specific queries:</p><ul><li><code>FirestoreFilterAdapter</code></li></ul></li></ul><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h3><p>To use the Firestore implementation, import the factory function and call it:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createFirestoreImplementation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@roar-firebase-functions/core&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> firestoreImpl <span class="token operator">=</span> <span class="token function">createFirestoreImplementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This returns a <code>FirestoreImplementation</code> object containing all initialized repositories and services, ready to use with standardized APIs for data access and manipulation.</p><h3 id="benefits" tabindex="-1"><a class="header-anchor" href="#benefits"><span>Benefits</span></a></h3><ul><li><strong>Serverless Architecture</strong>: No need to manage server infrastructure</li><li><strong>Real-time Data</strong>: Built-in support for real-time updates</li><li><strong>Scalability</strong>: Automatically scales with usage</li><li><strong>Security</strong>: Integrated with Firebase Authentication and security rules</li><li><strong>Integration</strong>: Seamless integration with other Google Cloud services</li></ul>`,14)]))}const c=t(n,[["render",o],["__file","database-implementations.html.vue"]]),p=JSON.parse('{"path":"/developer/backend-architecture/architecture/database-implementations.html","title":"Database Implementations","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Firebase Implementation","slug":"firebase-implementation","link":"#firebase-implementation","children":[{"level":3,"title":"Implementation Structure","slug":"implementation-structure","link":"#implementation-structure","children":[]},{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":3,"title":"Benefits","slug":"benefits","link":"#benefits","children":[]}]}],"git":{"updatedTime":1744670523000,"contributors":[{"name":"Kyle","username":"Kyle","email":"ksmontville@gmail.com","commits":2,"url":"https://github.com/Kyle"}]},"filePathRelative":"developer/backend-architecture/architecture/database-implementations.md"}');export{c as comp,p as data};
