import{_ as s,c as a,d as p,o as e}from"./app-BVqTKxSm.js";const t={};function o(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="letter-clowder" tabindex="-1"><a class="header-anchor" href="#letter-clowder"><span>Letter - Clowder</span></a></h1><h3 id="_1-parameter-extraction-from-url-serve-serve-js" tabindex="-1"><a class="header-anchor" href="#_1-parameter-extraction-from-url-serve-serve-js"><span>1. <strong>Parameter Extraction from URL (<code>serve/serve.js</code>)</strong></span></a></h3><ul><li>Extract Clowder-specific parameters such as <code>earlyStopping</code>, <code>tolerance</code>, and <code>logicalOperation</code>.</li><li><strong>DO NOT USE</strong> <code>userMode</code> as it is no longer required for Clowder-based logic.</li><li>Add these parameters to the <code>gameParams</code> array.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Parameters for Clowder</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> earlyStopping <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;earlyStopping&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> tolerance <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;tolerance&#39;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> logicalOperation <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;logicalOperation&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Other useful parameters</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> threshold <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;threshold&#39;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> patience <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;patience&#39;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> nItems <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;nItems&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;nItems&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> randomSeed <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;random&#39;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> catsToUpdate <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;catsToUpdate&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Add more parameters for Clowder if needed</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-initialize-clowder-in-the-store-session-experiment-config-config-js" tabindex="-1"><a class="header-anchor" href="#_2-initialize-clowder-in-the-store-session-experiment-config-config-js"><span>2. <strong>Initialize Clowder in the Store Session (<code>experiment/config/config.js</code>)</strong></span></a></h3><ul><li>Inside the <code>initStore</code> function, set the following:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;itemSelect&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mfi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Maximum Fisher Information algorithm (modifiable if needed)</span></span>
<span class="line">store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;currentCatIndex&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ensures the session starts with the first category if the page is refreshed</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Initialize Clowder before returning the session:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">initializeClowder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="_3-create-cats-and-clowder-experiment-experimentsetup-js" tabindex="-1"><a class="header-anchor" href="#_3-create-cats-and-clowder-experiment-experimentsetup-js"><span>3. <strong>Create CATs and Clowder (<code>experiment/experimentSetup.js</code>)</strong></span></a></h3><ul><li>Implement the <code>initializeClowder</code> function to set up Clowder instances for different letter-related trials.</li><li>Define <code>catsConfig</code> for each Clowder instance, specifying <code>method</code>, <code>itemSelect</code>, <code>minTheta</code>, <code>maxTheta</code>, and <code>randomSeed</code>.</li><li>Initialize Clowderâ€™s corpus using <code>prepareClowderCorpus</code>.</li><li>Select the next stimulus using the Clowder function <code>updateCatAndGetNextItem</code>.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Cat<span class="token punctuation">,</span> Clowder<span class="token punctuation">,</span> StopAfterNItems<span class="token punctuation">,</span> prepareClowderCorpus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@bdelab/jscat&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// English</span></span>
<span class="line"><span class="token keyword">import</span> enLetterCatCorpus <span class="token keyword">from</span> <span class="token string">&#39;../stimuli/en/letterCatCorpus.csv&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> catOrderMap <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">// This order map corresponds to the order we want to give for the timeline and the selection of the cats</span></span>
<span class="line">  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&#39;letterNamePractice&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&#39;letterNameLower&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&#39;letterNameUpper&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&#39;letterPhonemePractice&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">4</span><span class="token operator">:</span> <span class="token string">&#39;letterPhoneme&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> catToSubTaskMap <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">// This map is the match the name of the cats with the subtasks on this app</span></span>
<span class="line">  <span class="token literal-property property">letterNamePractice</span><span class="token operator">:</span> <span class="token string">&#39;LetterPractice&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">letterNameLower</span><span class="token operator">:</span> <span class="token string">&#39;LowercaseNames&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">letterNameUpper</span><span class="token operator">:</span> <span class="token string">&#39;UppercaseNames&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">letterPhonemePractice</span><span class="token operator">:</span> <span class="token string">&#39;PhonemePractice&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">letterPhoneme</span><span class="token operator">:</span> <span class="token string">&#39;Phonemes&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">let</span> clowder<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">initializeClowder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Define the \`cats\` configuration</span></span>
<span class="line">  <span class="token keyword">const</span> catsConfig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">letterNamePractice</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;EAP&#39;</span><span class="token punctuation">,</span> <span class="token comment">// MLE or other offered clowder algorithm</span></span>
<span class="line">      <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;itemSelect&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&#39;seed-lower-practice&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">letterNameLower</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;EAP&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;itemSelect&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&#39;seed-lower&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">letterNameUpper</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;EAP&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;itemSelect&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&#39;seed-upper&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">letterPhonemePractice</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;EAP&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;itemSelect&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&#39;seed-phoneme-practice&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">letterPhoneme</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;EAP&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;itemSelect&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&#39;seed-phoneme&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;EAP&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;itemSelect&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&#39;seed-lower-practice&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> earlyStoppingCats <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// store.session.get(&#39;config&#39;).earlyStopping) // if any</span></span>
<span class="line">  earlyStoppingCats <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopAfterNItems</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// Clowder method to early stop at specific number of items</span></span>
<span class="line">    <span class="token literal-property property">requiredItems</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">letterNameLower</span><span class="token operator">:</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>nItems <span class="token operator">??</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">letterNameUpper</span><span class="token operator">:</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>nItems <span class="token operator">??</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">letterPhoneme</span><span class="token operator">:</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>nItems <span class="token operator">??</span> <span class="token number">15</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">logicalOperation</span><span class="token operator">:</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>logicalOperation <span class="token operator">??</span> <span class="token string">&#39;only&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> clowderCorpus <span class="token operator">=</span> <span class="token function">prepareClowderCorpus</span><span class="token punctuation">(</span> <span class="token comment">// function to grab cat names and irt parameters from a given csv file</span></span>
<span class="line">    enLetterCatCorpus<span class="token punctuation">,</span> <span class="token comment">//corpus</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token string">&#39;letterNamePractice&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;letterNameLower&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;letterNameUpper&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;letterPhonemePractice&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;letterPhoneme&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;total&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// cat names</span></span>
<span class="line">    <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token comment">// separator</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  clowder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clowder</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// new instance of Clowder</span></span>
<span class="line">    <span class="token literal-property property">cats</span><span class="token operator">:</span> catsConfig<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">corpus</span><span class="token operator">:</span> clowderCorpus<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>randomSeed <span class="token operator">??</span> <span class="token string">&#39;random-seed&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">earlyStopping</span><span class="token operator">:</span> earlyStoppingCats<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">setNextStimulus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// function on letter to get the next stimulus</span></span>
<span class="line">  <span class="token keyword">let</span> catIndex <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;currentCatIndex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// eslint-disable-next-line eqeqeq</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>catIndex <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;currentCatIndex&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    catIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> catName <span class="token operator">=</span> catOrderMap<span class="token punctuation">[</span>catIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> previousItem <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;previousItem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> previousAnswer <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;previousAnswer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> nextStimulus <span class="token operator">=</span> clowder<span class="token punctuation">.</span><span class="token function">updateCatAndGetNextItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// clowder function to select the next stimulus</span></span>
<span class="line">    <span class="token literal-property property">catToSelect</span><span class="token operator">:</span> catName<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">catsToUpdate</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;total&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;letterNameLower&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;letterNameUpper&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;letterPhoneme&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// notice here that we did not add all the created cats, only the ones we want to updatw</span></span>
<span class="line">    <span class="token literal-property property">items</span><span class="token operator">:</span> previousItem <span class="token operator">??</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">answers</span><span class="token operator">:</span> previousAnswer <span class="token operator">??</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">randomlySelectUnvalidated</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>nextStimulus <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// returning undefined from clowder.updateCatAndGetNextItem would indicate early stopping and moving to next block</span></span>
<span class="line">    store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;nextStimulus&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;nextStimulus&#39;</span><span class="token punctuation">,</span> nextStimulus<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">moveToNextBlock</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// move to next cat - timeline for the task</span></span>
<span class="line">  <span class="token keyword">const</span> catIndex <span class="token operator">=</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;currentCatIndex&#39;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;subTaskName&#39;</span><span class="token punctuation">,</span> catToSubTaskMap<span class="token punctuation">[</span>catOrderMap<span class="token punctuation">[</span>catIndex<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;currentCatIndex&#39;</span><span class="token punctuation">,</span> catIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;correctItems&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;incorrectItems&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;trialNumSubtask&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// counter for trials in subtask</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-stimulus-control-experiment-trials-stimulus-js" tabindex="-1"><a class="header-anchor" href="#_4-stimulus-control-experiment-trials-stimulus-js"><span>4. <strong>Stimulus Control (<code>experiment/trials/stimulus.js</code>)</strong></span></a></h3><ul><li>Define <code>buildBlock</code>, which organizes the letter-based timeline using Clowder.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;store2&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ifLetterNameTest<span class="token punctuation">,</span> ifRealTrialResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./stimulusLetterName&#39;</span><span class="token punctuation">;</span> <span class="token comment">// story breaks during stimulus</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ifPracticeCorrect<span class="token punctuation">,</span> ifPracticeIncorrect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./practice&#39;</span><span class="token punctuation">;</span> <span class="token comment">// story breaks during practice</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> setNextStimulus<span class="token punctuation">,</span> moveToNextBlock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../experimentSetup&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">buildBlock</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">preInstructions</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> stimulusLoop <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">timeline</span><span class="token operator">:</span> <span class="token punctuation">[</span>ifLetterNameTest<span class="token punctuation">,</span> ifPracticeCorrect<span class="token punctuation">,</span> ifPracticeIncorrect<span class="token punctuation">,</span> ifRealTrialResponse<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">loop_function</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setNextStimulus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;nextStimulus&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">timeline</span><span class="token operator">:</span> <span class="token punctuation">[</span>preInstructions<span class="token punctuation">,</span> stimulusLoop<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">on_timeline_start</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">moveToNextBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">setNextStimulus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_5-experiment-execution-updates-experiment-experiment-js" tabindex="-1"><a class="header-anchor" href="#_5-experiment-execution-updates-experiment-experiment-js"><span>5. <strong>Experiment Execution Updates (<code>experiment/experiment.js</code>)</strong></span></a></h3><ul><li>Incorporate <code>buildBlock</code>, ensuring Clowder-managed stimulus presentation.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> buildBlock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./trials/stimulus&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Define the timeline for transitions:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">timeline<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">buildBlock</span><span class="token punctuation">(</span>letterIntroAndInstructions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">timeline<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">buildBlock</span><span class="token punctuation">(</span>letterPracticeDone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">timeline<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">buildBlock</span><span class="token punctuation">(</span>letterTransition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">timeline<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">buildBlock</span><span class="token punctuation">(</span>soundIntroAndInstructions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">timeline<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">buildBlock</span><span class="token punctuation">(</span>soundPracticeDone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_6-scoring-and-progress-tracking-updates-experiment-scores-js" tabindex="-1"><a class="header-anchor" href="#_6-scoring-and-progress-tracking-updates-experiment-scores-js"><span>6. <strong>Scoring and Progress Tracking Updates (<code>experiment/scores.js</code>)</strong></span></a></h3><ul><li>Compute Clowder-based scores.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> clowder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./experimentSetup&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> subTaskToCatMap <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">LetterPractice</span><span class="token operator">:</span> <span class="token string">&#39;letterNamePractice&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">LowercaseNames</span><span class="token operator">:</span> <span class="token string">&#39;letterNameLower&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">UppercaseNames</span><span class="token operator">:</span> <span class="token string">&#39;letterNameUpper&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">PhonemePractice</span><span class="token operator">:</span> <span class="token string">&#39;letterPhonemePractice&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">Phonemes</span><span class="token operator">:</span> <span class="token string">&#39;letterPhoneme&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">computedScoreCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">rawScores</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// otrher scores</span></span>
<span class="line">    <span class="token literal-property property">thetaEstimate</span><span class="token operator">:</span> clowder<span class="token punctuation">.</span>theta<span class="token punctuation">[</span>subTaskToCatMap<span class="token punctuation">[</span>store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;subTaskName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// check names</span></span>
<span class="line">    <span class="token literal-property property">thetaSE</span><span class="token operator">:</span> clowder<span class="token punctuation">.</span>seMeasurement<span class="token punctuation">[</span>subTaskToCatMap<span class="token punctuation">[</span>store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;subTaskName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// check names</span></span>
<span class="line">    <span class="token literal-property property">thetaEstimateTotal</span><span class="token operator">:</span> clowder<span class="token punctuation">.</span>theta<span class="token punctuation">.</span>total<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">thetaSETotal</span><span class="token operator">:</span> clowder<span class="token punctuation">.</span>seMeasurement<span class="token punctuation">.</span>total<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28)]))}const i=s(t,[["render",o],["__file","letter-clowder.html.vue"]]),r=JSON.parse('{"path":"/developer/clowder-implementation/letter-clowder.html","title":"Letter - Clowder","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"1. Parameter Extraction from URL (serve/serve.js)","slug":"_1-parameter-extraction-from-url-serve-serve-js","link":"#_1-parameter-extraction-from-url-serve-serve-js","children":[]},{"level":3,"title":"2. Initialize Clowder in the Store Session (experiment/config/config.js)","slug":"_2-initialize-clowder-in-the-store-session-experiment-config-config-js","link":"#_2-initialize-clowder-in-the-store-session-experiment-config-config-js","children":[]},{"level":3,"title":"3. Create CATs and Clowder (experiment/experimentSetup.js)","slug":"_3-create-cats-and-clowder-experiment-experimentsetup-js","link":"#_3-create-cats-and-clowder-experiment-experimentsetup-js","children":[]},{"level":3,"title":"4. Stimulus Control (experiment/trials/stimulus.js)","slug":"_4-stimulus-control-experiment-trials-stimulus-js","link":"#_4-stimulus-control-experiment-trials-stimulus-js","children":[]},{"level":3,"title":"5. Experiment Execution Updates (experiment/experiment.js)","slug":"_5-experiment-execution-updates-experiment-experiment-js","link":"#_5-experiment-execution-updates-experiment-experiment-js","children":[]},{"level":3,"title":"6. Scoring and Progress Tracking Updates (experiment/scores.js)","slug":"_6-scoring-and-progress-tracking-updates-experiment-scores-js","link":"#_6-scoring-and-progress-tracking-updates-experiment-scores-js","children":[]}],"git":{"updatedTime":1743546779000,"contributors":[{"name":"Elijah Kelly","username":"Elijah Kelly","email":"kellyel@stanford.edu","commits":1,"url":"https://github.com/Elijah Kelly"},{"name":"emily-ejag","username":"emily-ejag","email":"emily.artegar@gmail.com","commits":1,"url":"https://github.com/emily-ejag"}]},"filePathRelative":"developer/clowder-implementation/letter-clowder.md"}');export{i as comp,r as data};
