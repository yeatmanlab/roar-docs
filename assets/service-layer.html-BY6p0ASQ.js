import{_ as e,c as a,f as t,d as i,o as l,r as p}from"./app-FrdTVLMr.js";const r={};function o(c,n){const s=p("Mermaid");return l(),a("div",null,[n[0]||(n[0]=t(`<h1 id="service-layer-architecture" tabindex="-1"><a class="header-anchor" href="#service-layer-architecture"><span>Service Layer Architecture</span></a></h1><h2 id="core-principles" tabindex="-1"><a class="header-anchor" href="#core-principles"><span>Core Principles</span></a></h2><h3 id="repository-abstraction-chain" tabindex="-1"><a class="header-anchor" href="#repository-abstraction-chain"><span>Repository Abstraction Chain</span></a></h3><p>The service layer operates on a chain of repository abstractions that provide increasingly specialized functionality:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">BaseRepository<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span>
<span class="line">  └─<span class="token operator">&gt;</span> AdministrationBaseRepository</span>
<span class="line">       └─<span class="token operator">&gt;</span> FirestoreAdministrationRepository</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each level in this chain serves a specific purpose:</p><ul><li><strong>BaseRepository</strong>: Defines fundamental CRUD operations</li><li><strong>Specialized Repositories</strong>: Add domain-specific operations</li><li><strong>Concrete Implementations</strong>: Provide actual database interactions</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">AdministrationService</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">private</span> adminRepo<span class="token operator">:</span> AdministrationBaseRepository<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">private</span> orgRepo<span class="token operator">:</span> OrgBaseRepository<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">private</span> userClaimRepo<span class="token operator">:</span> UserClaimBaseRepository</span>
<span class="line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">async</span> <span class="token function">getAdministration</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Result<span class="token operator">&lt;</span>Administration<span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adminRepo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Result<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></span>
<span class="line">  error<span class="token operator">?</span><span class="token operator">:</span> Error<span class="token punctuation">;</span></span>
<span class="line">  metadata<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="benefits" tabindex="-1"><a class="header-anchor" href="#benefits"><span>Benefits</span></a></h3><ol><li><p><strong>Testability</strong></p><ul><li>Easy to mock repository dependencies</li><li>Isolated business logic testing</li><li>Clear contract boundaries</li></ul></li><li><p><strong>Maintainability</strong></p><ul><li>Separation of concerns</li><li>Implementation independence</li><li>Clear dependency hierarchy</li></ul></li><li><p><strong>Scalability</strong></p><ul><li>New repositories can be added without service changes</li><li>Multiple database support</li><li>Consistent patterns across the system</li></ul></li></ol><h2 id="service-layer-pattern-overview" tabindex="-1"><a class="header-anchor" href="#service-layer-pattern-overview"><span>Service Layer Pattern Overview</span></a></h2><p>The service layer in ROAR&#39;s repository pattern is implemented through factory functions that create service instances with their required repository dependencies. This design provides several key benefits:</p><h3 id="factory-function-pattern" tabindex="-1"><a class="header-anchor" href="#factory-function-pattern"><span>Factory Function Pattern</span></a></h3><ul><li><strong>Dependency Injection</strong>: Repository dependencies are injected at creation time</li><li><strong>Encapsulation</strong>: Implementation details are hidden behind interfaces</li><li><strong>Type Safety</strong>: TypeScript ensures correct repository implementations</li><li><strong>Testability</strong>: Easy to mock dependencies for unit testing</li></ul><h3 id="service-creation-example" tabindex="-1"><a class="header-anchor" href="#service-creation-example"><span>Service Creation Example</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> adminService <span class="token operator">=</span> <span class="token function">createAdministrationService</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  administrationRepository<span class="token punctuation">,</span> <span class="token comment">// AdministrationBaseRepository implementation</span></span>
<span class="line">  orgRepository<span class="token punctuation">,</span>           <span class="token comment">// OrgBaseRepository implementation</span></span>
<span class="line">  userClaimRepository     <span class="token comment">// UserClaimBaseRepository implementation</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> idpService <span class="token operator">=</span> <span class="token function">createIdentityProviderService</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  identityProviderRepository<span class="token punctuation">,</span> <span class="token comment">// IdentityProviderBaseRepository implementation</span></span>
<span class="line">  userClaimRepository<span class="token punctuation">,</span>       <span class="token comment">// UserClaimBaseRepository implementation</span></span>
<span class="line">  userRepository            <span class="token comment">// UserBaseRepository implementation</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="key-benefits" tabindex="-1"><a class="header-anchor" href="#key-benefits"><span>Key Benefits</span></a></h3><ol><li><strong>Separation of Concerns</strong>: Services handle business logic while repositories manage data access</li><li><strong>Loose Coupling</strong>: Services depend on repository interfaces, not implementations</li><li><strong>Single Responsibility</strong>: Each service handles specific domain operations</li><li><strong>Maintainability</strong>: Easy to modify service implementation without affecting other layers</li><li><strong>Scalability</strong>: New services can be added following the same pattern</li></ol><p>This service layer implementation completes the repository pattern by providing a clean separation between business logic and data access while maintaining type safety and testability.</p><h3 id="service-layer-pattern-implementation" tabindex="-1"><a class="header-anchor" href="#service-layer-pattern-implementation"><span>Service Layer Pattern Implementation</span></a></h3>`,21)),i(s,{id:"mermaid-177",code:"eJzNVd1q2zAUvu9TiELBZWsfwJRAsxAIjG5k9GrdhbBOkgO27ElyhhnLs+9YtlP5R7ZLLxpfJPbR+T5950dHUcy1XiHfK55cMXpubtgPUEeMgG2kAbXjEWi7Yl3Zo0hQojaKG0xl4/rXepTPwwM2sMXibP20B9NGLouNCFCEjAwo97ch+67SBDWctqDz2Jza7qfTCJcOJuE/fzkEeSa4gbZHwMvPsBPf+2Qti29qr4OUfkJWvn6ltdlS/105ad8IkAZNQdAjClCzE68LGT1rUEFWI8Me12eWk8OKGx6y0tVReExRtEMsHb7EHBMd5GPlO/u5KaoS71BQcPRXbWtN00R1WqhPt5ClGk2qCraCDCSFFeFIsy65BgczmbpIAakNblvxdz4f49i1VAG6FgEx9EiWxRNPGmOrztQllyOznb6N0GsqjW3pAeXnOl2O/mWxTbl6RjGkt3sKLkl2o4lGpCfTH6/29RyueWRFrHMZ2bnnaK32nb40djV2QHPG6W7SNBgGWfrpqWBzBuacTT08vVEUVyP/gFkd/kjg9/cLzz0a1jiXwxdJyeJbe+WxRMOb3d11ZXS6KiwvhkqKn6E/sWbBfOOiBlu0L7oSP3F8HQ1jLBMq5sBH9FNjPKVNMSW9sV2qRjvjujlLTWsyc+CmKeaLHEZhksWQkExrfZF/0ByYgt85KhD0Uouju/F6SIovwikxPtxb5PwH04dUbg=="})])}const u=e(r,[["render",o],["__file","service-layer.html.vue"]]),m=JSON.parse('{"path":"/developer/backend-architecture/architecture/service-layer.html","title":"Service Layer Architecture","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Core Principles","slug":"core-principles","link":"#core-principles","children":[{"level":3,"title":"Repository Abstraction Chain","slug":"repository-abstraction-chain","link":"#repository-abstraction-chain","children":[]},{"level":3,"title":"Benefits","slug":"benefits","link":"#benefits","children":[]}]},{"level":2,"title":"Service Layer Pattern Overview","slug":"service-layer-pattern-overview","link":"#service-layer-pattern-overview","children":[{"level":3,"title":"Factory Function Pattern","slug":"factory-function-pattern","link":"#factory-function-pattern","children":[]},{"level":3,"title":"Service Creation Example","slug":"service-creation-example","link":"#service-creation-example","children":[]},{"level":3,"title":"Key Benefits","slug":"key-benefits","link":"#key-benefits","children":[]},{"level":3,"title":"Service Layer Pattern Implementation","slug":"service-layer-pattern-implementation","link":"#service-layer-pattern-implementation","children":[]}]}],"git":{"updatedTime":1744672270000,"contributors":[{"name":"Kyle","username":"Kyle","email":"ksmontville@gmail.com","commits":4,"url":"https://github.com/Kyle"}]},"filePathRelative":"developer/backend-architecture/architecture/service-layer.md"}');export{u as comp,m as data};
