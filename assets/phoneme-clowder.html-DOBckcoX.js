import{_ as s,c as a,d as p,o as t}from"./app-Ddwicbh1.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="phoneme-clowder" tabindex="-1"><a class="header-anchor" href="#phoneme-clowder"><span>Phoneme - Clowder</span></a></h1><blockquote><p>üìù <strong>NOTE:</strong> Phoneme will use the URL param <code>adaptive=true</code> to switch between adaptive and non-adaptive modes.</p></blockquote><h3 id="_1-parameter-extraction-from-url-serve-serve-js" tabindex="-1"><a class="header-anchor" href="#_1-parameter-extraction-from-url-serve-serve-js"><span>1. <strong>Parameter Extraction from URL (<code>serve/serve.js</code>)</strong></span></a></h3><ul><li>Extract Clowder-specific parameters such as <code>earlyStopping</code>, <code>tolerance</code>, and <code>logicalOperation</code>.</li><li>Add these parameters to the <code>gameParams</code> array.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Parameters for Clowder</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> earlyStopping <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;earlyStopping&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> tolerance <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;tolerance&#39;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> logicalOperation <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;logicalOperation&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Other useful parameters</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> threshold <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;threshold&#39;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> patience <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;patience&#39;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> nItems <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;nItems&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;nItems&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> randomSeed <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;random&#39;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> catsToUpdate <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;catsToUpdate&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Add more parameters for Clowder if needed</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-initialize-clowder-in-the-store-session-experiment-config-config-js" tabindex="-1"><a class="header-anchor" href="#_2-initialize-clowder-in-the-store-session-experiment-config-config-js"><span>2. <strong>Initialize Clowder in the Store Session (<code>experiment/config/config.js</code>)</strong></span></a></h3><ul><li>Inside the <code>initStore</code> function, set the following:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;itemSelect&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mfi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Maximum Fisher Information algorithm (modifiable if needed)</span></span>
<span class="line">store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;adaptive&#39;</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>adaptive<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;previousItem&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;previousAnswer&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;currentCatIndex&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Initialize Clowder before returning the session:</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">initializeClowder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="_3-create-cats-and-clowder-experiment-experimenthelpers-js" tabindex="-1"><a class="header-anchor" href="#_3-create-cats-and-clowder-experiment-experimenthelpers-js"><span>3. <strong>Create CATs and Clowder (<code>experiment/experimentHelpers.js</code>)</strong></span></a></h3><ul><li>Implement the <code>initializeClowder</code> function to set up Clowder instances for different phoneme-related trials.</li><li>Define <code>catsConfig</code> for each Clowder instance, specifying <code>method</code>, <code>itemSelect</code>, <code>minTheta</code>, <code>maxTheta</code>, and <code>randomSeed</code>.</li><li>Initialize Clowder‚Äôs corpus using <code>prepareClowderCorpus</code>.</li><li>Select the next stimulus using the Clowder function <code>updateCatAndGetNextItem</code>.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Cat<span class="token punctuation">,</span> Clowder<span class="token punctuation">,</span> StopAfterNItems<span class="token punctuation">,</span> prepareClowderCorpus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@bdelab/jscat&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> catOrderMap <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&#39;practiceFSM&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&#39;fsm&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&#39;practiceLSM&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&#39;lsm&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">4</span><span class="token operator">:</span> <span class="token string">&#39;practiceDEL&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">5</span><span class="token operator">:</span> <span class="token string">&#39;del&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// eslint-disable-next-line import/no-mutable-exports</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">let</span> clowder<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// TODO: Update values accordingly</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">initializeClowder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Define the \`cats\` configuration</span></span>
<span class="line">  <span class="token keyword">const</span> catsConfig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">practiceFSM</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;MLE&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;itemSelect&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&#39;seed-fsm-practice&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">fsm</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;MLE&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;itemSelect&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&#39;seed-fsm&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">practiceLSM</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;MLE&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;itemSelect&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&#39;seed-lsm-practice&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">lsm</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;MLE&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;itemSelect&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&#39;seed-lsm&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">practiceDEL</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;MLE&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;itemSelect&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&#39;seed-del-practice&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">del</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;MLE&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">itemSelect</span><span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;itemSelect&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">minTheta</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">maxTheta</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> <span class="token string">&#39;seed-del&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// IF EARLY STOPPING IS REQUIRED</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// let earlyStoppingCats = null;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// if (store.session.get(&#39;config&#39;).earlyStopping) {</span></span>
<span class="line">  <span class="token comment">// const earlyStoppingCats = new StopAfterNItems({</span></span>
<span class="line">  <span class="token comment">//   requiredItems: {</span></span>
<span class="line">  <span class="token comment">//     fsm: 2,</span></span>
<span class="line">  <span class="token comment">//     lsm: 2,</span></span>
<span class="line">  <span class="token comment">//     del: 2,</span></span>
<span class="line">  <span class="token comment">//   },</span></span>
<span class="line">  <span class="token comment">//   logicalOperation: store.session.get(&#39;config&#39;).logicalOperation ?? &#39;only&#39;,</span></span>
<span class="line">  <span class="token comment">// });</span></span>
<span class="line">  <span class="token comment">// }</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>üìù <strong>NOTE:</strong> all columns must be defined in the corpus. if there is an <code>undefined</code> column, it will consider this stimulus as not-new and the <code>previousItem</code> will not properly be saved.</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> combinedCorpus <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token operator">...</span>corpus<span class="token punctuation">.</span>practice_DEL<span class="token punctuation">,</span></span>
<span class="line">  <span class="token operator">...</span>corpus<span class="token punctuation">.</span>practice_FSM<span class="token punctuation">,</span></span>
<span class="line">  <span class="token operator">...</span>corpus<span class="token punctuation">.</span>practice_LSM<span class="token punctuation">,</span></span>
<span class="line">  <span class="token operator">...</span>corpus<span class="token punctuation">.</span>test_DEL<span class="token punctuation">,</span></span>
<span class="line">  <span class="token operator">...</span>corpus<span class="token punctuation">.</span>test_FSM<span class="token punctuation">,</span></span>
<span class="line">  <span class="token operator">...</span>corpus<span class="token punctuation">.</span>test_LSM<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> clowderCorpus <span class="token operator">=</span> <span class="token function">prepareClowderCorpus</span><span class="token punctuation">(</span></span>
<span class="line">  combinedCorpus<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token string">&#39;practiceFSM&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;practiceLSM&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;practiceDEL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fsm&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lsm&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;del&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;total&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;corpusClowder&#39;</span><span class="token punctuation">,</span> clowderCorpus<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">clowder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clowder</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">cats</span><span class="token operator">:</span> catsConfig<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">corpus</span><span class="token operator">:</span> clowderCorpus<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">randomSeed</span><span class="token operator">:</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>randomSeed<span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// earlyStopping: earlyStoppingCats,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">moveToNextBlock</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">const</span> catIndex <span class="token operator">=</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;currentCatIndex&#39;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;currentCatIndex&#39;</span><span class="token punctuation">,</span> catIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">setNextStimulus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">let</span> catIndex <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;currentCatIndex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// eslint-disable-next-line eqeqeq</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>catIndex <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;currentCatIndex&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  catIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> catName <span class="token operator">=</span> catOrderMap<span class="token punctuation">[</span>catIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> previousItem <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;previousItem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> previousAnswer <span class="token operator">=</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;previousAnswer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> nextStimulus <span class="token operator">=</span> clowder<span class="token punctuation">.</span><span class="token function">updateCatAndGetNextItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">catToSelect</span><span class="token operator">:</span> catName<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">catsToUpdate</span><span class="token operator">:</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>catsToUpdate <span class="token operator">??</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&#39;practiceFSM&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;fsm&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;practiceLSM&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;lsm&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;practiceDEL&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;del&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;total&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">items</span><span class="token operator">:</span> previousItem <span class="token operator">??</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">answers</span><span class="token operator">:</span> previousAnswer <span class="token operator">??</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">randomlySelectUnvalidated</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>nextStimulus <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;currentStimulus&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">moveToNextBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;currentStimulus&#39;</span><span class="token punctuation">,</span> nextStimulus<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>On saveTrialData, don&#39;t forget to add the responses.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">===</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;currentStimulus&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>goal<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;previousAnswer&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;previousItem&#39;</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;currentStimulus&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;previousAnswer&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;previousItem&#39;</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;currentStimulus&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-stimulus-control-experiment-trials-fsm-lsm-del-instructions-ready-test-js" tabindex="-1"><a class="header-anchor" href="#_4-stimulus-control-experiment-trials-fsm-lsm-del-instructions-ready-test-js"><span>4. **Stimulus Control (<code>experiment/trials/{fsm, lsm, del}/{instructions, ready, test}.js</code>) **</span></a></h3><ul><li>import <code>setNextStimulus</code> from <code>experiment/experimentHelpers</code></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> setNextStimulus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../experimentHelpers&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Call <code>setNextStimulus</code> every time the <code>currentStimulus</code> is set</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>adaptive<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;currentStimulus&#39;</span><span class="token punctuation">,</span> <span class="token function">setNextStimulus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;currentStimulus&#39;</span><span class="token punctuation">,</span> corpus<span class="token punctuation">.</span>practice_DEL<span class="token punctuation">[</span>store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;currentCorpusIndex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_5-setnextstimulus-and-saving-responses-experiment-trials-test-js" tabindex="-1"><a class="header-anchor" href="#_5-setnextstimulus-and-saving-responses-experiment-trials-test-js"><span>5. <strong>setNextStimulus and saving responses (<code>experiment/trials/test.js</code>)</strong></span></a></h3><ul><li>import <code>setNextStimulus</code> from <code>experiment/experimentHelpers</code></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> setNextStimulus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../experimentHelpers&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Call <code>setNextStimulus</code> for the switch mode</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;practice&#39;</span><span class="token operator">:</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;previousAnswer&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>adaptive<span class="token punctuation">)</span> <span class="token function">setNextStimulus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> mediaAssets<span class="token punctuation">.</span>audio<span class="token punctuation">[</span><span class="token function">camelize</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;currentStimulus&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>instr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;del&#39;</span><span class="token operator">:</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>adaptive<span class="token punctuation">)</span> <span class="token function">setNextStimulus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> mediaAssets<span class="token punctuation">.</span>audio<span class="token punctuation">[</span><span class="token function">camelize</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;currentStimulus&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>quest<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>adaptive<span class="token punctuation">)</span> <span class="token function">setNextStimulus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> mediaAssets<span class="token punctuation">.</span>audio<span class="token punctuation">[</span><span class="token function">camelize</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;currentStimulus&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stimulus<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>on_finish, don&#39;t forget to add the responses.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function-variable function">on_finish</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>adaptive<span class="token punctuation">)</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;previousAnswer&#39;</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;response&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>adaptive<span class="token punctuation">)</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;previousItem&#39;</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token string">&#39;currentStimulus&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_6-fetch-and-parse-corpus-for-clowder-config-corpus-js" tabindex="-1"><a class="header-anchor" href="#_6-fetch-and-parse-corpus-for-clowder-config-corpus-js"><span>6. <strong>Fetch and Parse Corpus for Clowder (<code>config/corpus.js</code>)</strong></span></a></h3><ul><li>Add the needed rows to the corpus handler</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> csvAssets <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">test</span><span class="token operator">:</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span>adaptive</span>
<span class="line">      <span class="token operator">?</span> corpusTranslations<span class="token punctuation">[</span>i18next<span class="token punctuation">.</span>language<span class="token punctuation">]</span><span class="token punctuation">.</span>testCat</span>
<span class="line">      <span class="token operator">:</span> corpusTranslations<span class="token punctuation">[</span>i18next<span class="token punctuation">.</span>language<span class="token punctuation">]</span><span class="token punctuation">.</span>test<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">practice</span><span class="token operator">:</span> store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span>adaptive</span>
<span class="line">      <span class="token operator">?</span> corpusTranslations<span class="token punctuation">[</span>i18next<span class="token punctuation">.</span>language<span class="token punctuation">]</span><span class="token punctuation">.</span>practiceCat</span>
<span class="line">      <span class="token operator">:</span> corpusTranslations<span class="token punctuation">[</span>i18next<span class="token punctuation">.</span>language<span class="token punctuation">]</span><span class="token punctuation">.</span>practice<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Add CAT corpus-specific columns if in CAT mode</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">transformCSV</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">csvInput</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;config&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span>adaptive<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">[</span><span class="token string">&#39;practiceFSM&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;practiceLSM&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;practiceDEL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fsm&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lsm&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;del&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;total&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">op</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">suffix</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>op<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>suffix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">            newRow<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> row<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Assign the value from csvInput</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    accum<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newRow<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> accum<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_7-adding-new-corpus-experiment-i18n-js" tabindex="-1"><a class="header-anchor" href="#_7-adding-new-corpus-experiment-i18n-js"><span>7. <strong>Adding new corpus(<code>experiment/i18n.js</code>)</strong></span></a></h3><ul><li>Add the new corpus files</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> enCorpusPracticeCat <span class="token keyword">from</span> <span class="token string">&#39;./config/corpus/en/practice-cat.csv&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> enCorpusTestCat <span class="token keyword">from</span> <span class="token string">&#39;./config/corpus/en/test-cat.csv&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token literal-property property">en</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">test</span><span class="token operator">:</span> enCorpusTest<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">practice</span><span class="token operator">:</span> enCorpusPractice<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">practiceCat</span><span class="token operator">:</span> enCorpusPracticeCat<span class="token punctuation">,</span> <span class="token comment">//cat corpus</span></span>
<span class="line">    <span class="token literal-property property">testCat</span><span class="token operator">:</span> enCorpusTestCat<span class="token punctuation">,</span> <span class="token comment">//cat corpus</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41)]))}const i=s(e,[["render",o],["__file","phoneme-clowder.html.vue"]]),u=JSON.parse('{"path":"/developer/clowder-implementation/phoneme-clowder.html","title":"Phoneme - Clowder","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"1. Parameter Extraction from URL (serve/serve.js)","slug":"_1-parameter-extraction-from-url-serve-serve-js","link":"#_1-parameter-extraction-from-url-serve-serve-js","children":[]},{"level":3,"title":"2. Initialize Clowder in the Store Session (experiment/config/config.js)","slug":"_2-initialize-clowder-in-the-store-session-experiment-config-config-js","link":"#_2-initialize-clowder-in-the-store-session-experiment-config-config-js","children":[]},{"level":3,"title":"3. Create CATs and Clowder (experiment/experimentHelpers.js)","slug":"_3-create-cats-and-clowder-experiment-experimenthelpers-js","link":"#_3-create-cats-and-clowder-experiment-experimenthelpers-js","children":[]},{"level":3,"title":"4. **Stimulus Control (experiment/trials/{fsm, lsm, del}/{instructions, ready, test}.js) **","slug":"_4-stimulus-control-experiment-trials-fsm-lsm-del-instructions-ready-test-js","link":"#_4-stimulus-control-experiment-trials-fsm-lsm-del-instructions-ready-test-js","children":[]},{"level":3,"title":"5. setNextStimulus and saving responses (experiment/trials/test.js)","slug":"_5-setnextstimulus-and-saving-responses-experiment-trials-test-js","link":"#_5-setnextstimulus-and-saving-responses-experiment-trials-test-js","children":[]},{"level":3,"title":"6. Fetch and Parse Corpus for Clowder (config/corpus.js)","slug":"_6-fetch-and-parse-corpus-for-clowder-config-corpus-js","link":"#_6-fetch-and-parse-corpus-for-clowder-config-corpus-js","children":[]},{"level":3,"title":"7. Adding new corpus(experiment/i18n.js)","slug":"_7-adding-new-corpus-experiment-i18n-js","link":"#_7-adding-new-corpus-experiment-i18n-js","children":[]}],"git":{"updatedTime":1745808944000,"contributors":[{"name":"emily-ejag","username":"emily-ejag","email":"emily.artegar@gmail.com","commits":1,"url":"https://github.com/emily-ejag"}]},"filePathRelative":"developer/clowder-implementation/phoneme-clowder.md"}');export{i as comp,u as data};
