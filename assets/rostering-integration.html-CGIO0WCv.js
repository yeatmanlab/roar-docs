import{_ as l,c as r,d as o,e as a,a as n,b as e,f as c,r as p,o as u}from"./app-CT51LlpV.js";const d={};function k(g,s){const t=p("Mermaid"),i=p("RouteLink");return u(),r("div",null,[s[7]||(s[7]=o('<h1 id="roar-rostering-integration-spec" tabindex="-1"><a class="header-anchor" href="#roar-rostering-integration-spec"><span>ROAR Rostering Integration Spec</span></a></h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>This document defines how ROAR integrates with rostering partners (e.g. school districts) to ingest and synchronize user, organization, course, and enrollment data. It supports both API-based (e.g., OneRoster, Clever) and CSV-based integration.</p><h2 id="scope" tabindex="-1"><a class="header-anchor" href="#scope"><span>Scope</span></a></h2><ul><li><strong>In scope:</strong> Weekly ingestion of users, orgs, courses, enrollments; marking un-updated entities; generating unenrollment lists; deferred SSO binding.</li><li><strong>Out of scope:</strong> Transformation logic between OneRoster/Clever and ROAR models. Transformation logic for CSV upload.</li></ul><h2 id="actors" tabindex="-1"><a class="header-anchor" href="#actors"><span>Actors</span></a></h2><ul><li>District rostering feed (API or CSV)</li><li>ROAR ingestion service</li><li>ROAR auth service</li><li>Admin dashboard / reviewer</li></ul><h2 id="data-models" tabindex="-1"><a class="header-anchor" href="#data-models"><span>Data Models</span></a></h2><ul><li><strong>External Entities:</strong> user, org, course, class, enrollment</li><li><strong>Internal Entities:</strong> ROARUser, ROAROrg, ROARCourse, ROAREnrollment</li><li><strong>Deferred Auth Binding:</strong> If user is ingested via API, <code>auth_uid</code> is not assigned until first SSO login</li></ul><h2 id="workflows" tabindex="-1"><a class="header-anchor" href="#workflows"><span>Workflows</span></a></h2><h3 id="full-rostering-ingestion" tabindex="-1"><a class="header-anchor" href="#full-rostering-ingestion"><span>Full Rostering Ingestion</span></a></h3><p>ROAR currently only supports full rostering ingestion. Future work may support incremental ingestion using &quot;delta&quot; records. This full rostering sync can be run on command or scheduled weekly. A &quot;rostering run&quot; is a single execution of the ingestion process for one rostering partner.</p>',12)),a(t,{id:"mermaid-78",code:"eJxlkltPGzEQhd/5FfPUlzaVuBVe2ipsWEiVItSQSpUVRa49m1g49soXhRXLf2dsJ9zy6vnmzJkzXjreruBudAAwZJVDHhAMbsBZH9ApswQXzRwGgx9wwWoMYgVN1BocCuukn1PfRa5Wh2zaGQHWLT0oA/85sZiB6rAQR4UQmnuPe9BRgY4LFD26PeS4ICePUxudQLjrWnxKhZNc6Kvp3x6q090ePIYVCIcSTVBce+BGQmxJOWR92CgCErWISuYJW6Hh7ZiEvrHZK/wVxs0LC8qDsQG4pkmyA4mNMii/gEd63EHf4WY2mWTdU/hEesX+2euGA0oLKA0rFA/KmrLmW/j8DZyD28fPEn6e8RH7zd092dLQOiuQcpaQtg+KAs/rkkZYvFx3EVtJUSWdUVa4ZBO7hJam5bYOfBrvAw8xT7vMVM3+YHAdNFxpmrC9URmAD601JXEqiHvbNKmxzo1Xj0PytuN9FALpPPJnuuJVIvp/6Hu4ZpVdr1V4/w1pdRB23WosjkvDje1hzGrNiflIb/19prvQ6bmmY6bG6+zlF7tNGVE9WJiRZWe1XpNzqLXdzA+eAUCvAxc="}),s[8]||(s[8]=n("h3",{id:"deferred-auth-uid-binding",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#deferred-auth-uid-binding"},[n("span",null,"Deferred Auth UID Binding")])],-1)),a(t,{id:"mermaid-82",code:"eJwtjssOgjAQRfd+xewNfoKJPFxhTMRdQ0gpA0woU4TWmIj/bqlu75w593aznHq4pzuAkyiKK+SmIy4hio4QixsqpCeCdLY/OGpgD0pLGpfS83GAkvdFWtUDMaTxx8fJFq/4sjiz1BU1K6QiJx6CpfKW7flHtVLrWqoBcJSkPegvadBmIuPWzArBMT0cMi6Lb9emg5q4Ie42SxbYs0jMOGm0+F+/+wLCp0Lg"}),s[9]||(s[9]=n("h3",{id:"unenrollment-flow-stale-user-detection",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#unenrollment-flow-stale-user-detection"},[n("span",null,"Unenrollment Flow (stale user detection)")])],-1)),a(t,{id:"mermaid-86",code:"eJxNzz1uwzAMBeA9p3gXSI5QILHjLN3aToJhCDX9A0iiQNItevvKcoB24fS+R3IWnxe8tyfg6q6TkeDtJ32i4ZgD2cqpx/n8gpt7kCF4IzUIawmuaR5kS3qhNNI4eMPEguzFEklfCm9VNm7v8kL4Xm3BpiR6CV5t+KvZ8liad9NU07ou+PnIHkzNB8KRg62xnOFj1p20ldzdR6IkHMKTTcIRLLOCJ9iy6v/T7tV07pXLlqeLlAz0VWat7WrkUf4uZt8qlFmsP/0Cb75osg=="}),s[10]||(s[10]=n("h3",{id:"roster-sync-validation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#roster-sync-validation"},[n("span",null,"Roster Sync Validation")])],-1)),a(t,{id:"mermaid-90",code:"eJwtj01qw0AMhfc5xTtAc4UW/7TQTSikWZTBi2GsOIaJFDQypdS9ezVONuKB3vfBmzTeLvjsd0ATmrOR4vjDCZ1cb5lsFkbkEScmVsn5SmwD9vtntOFUCCrFkZknNB/vMMFEhhyNiiHJwlYGN7cb0YUqjUr4nu3yeGNm9C3OolgKaXmC6OQ35VgK1SCLeqiabtP0v40rHnQ1ucEkk0ZO9PLnvb721i8qK17DQRDTtoOJRhqr6F44yIq3cCSfFx23YfcPuGJZaQ=="}),s[11]||(s[11]=o('<h3 id="monitoring-alerts" tabindex="-1"><a class="header-anchor" href="#monitoring-alerts"><span>Monitoring &amp; Alerts</span></a></h3><p>Rostering events and sync statuses are recorded in the <code>user_rostering_events</code> and <code>rostering_sync_status</code> tables, respectively. See below for table schemas.</p><h3 id="post-sync-validation" tabindex="-1"><a class="header-anchor" href="#post-sync-validation"><span>Post-sync validation</span></a></h3><p>After the unenrollment flow is complete, ROAR runs a validation script that:</p><ul><li>Counts the number of active users, orgs, and classes provided by the rostering partner</li><li>Compares these counts to the number of active users, orgs, and classes in ROAR</li><li>Logs mismatches and raises alerts if discrepancies exceed defined thresholds</li></ul><h2 id="sql-schema" tabindex="-1"><a class="header-anchor" href="#sql-schema"><span>SQL Schema</span></a></h2><h3 id="users" tabindex="-1"><a class="header-anchor" href="#users"><span><code>users</code></span></a></h3>',7)),n("p",null,[s[1]||(s[1]=e("See the ")),a(i,{to:"/developer/tech-specs/backend/users-orgs.html"},{default:c(()=>s[0]||(s[0]=[e("users-orgs")])),_:1}),s[2]||(s[2]=e(" spec for the full schema. The ")),s[3]||(s[3]=n("code",null,"users",-1)),s[4]||(s[4]=e(" table contains a ")),s[5]||(s[5]=n("code",null,"last_rostering_update",-1)),s[6]||(s[6]=e(" field that tracks the last time a user was ingested via rostering."))]),s[12]||(s[12]=o(`<h3 id="rostering-partners" tabindex="-1"><a class="header-anchor" href="#rostering-partners"><span><code>rostering_partners</code></span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> rostering_partners <span class="token punctuation">(</span></span>
<span class="line">  id UUID <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">DEFAULT</span> gen_random_uuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  org_id UUID <span class="token keyword">REFERENCES</span> orgs<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- The top level ROAR org that this rostering partner corresponds to</span></span>
<span class="line">  name <span class="token keyword">TEXT</span> <span class="token keyword">UNIQUE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">  display_name <span class="token keyword">TEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">  description <span class="token keyword">TEXT</span><span class="token punctuation">,</span></span>
<span class="line">  created_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  updated_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  deleted_at <span class="token keyword">TIMESTAMP</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rostering-runs" tabindex="-1"><a class="header-anchor" href="#rostering-runs"><span><code>rostering_runs</code></span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> rostering_runs <span class="token punctuation">(</span></span>
<span class="line">  id UUID <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">DEFAULT</span> gen_random_uuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  partner_id UUID <span class="token keyword">REFERENCES</span> rostering_partners<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  ended_at <span class="token keyword">TIMESTAMP</span><span class="token punctuation">,</span></span>
<span class="line">  success <span class="token keyword">BOOLEAN</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">  created_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  updated_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  deleted_at <span class="token keyword">TIMESTAMP</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rostering-run-stats" tabindex="-1"><a class="header-anchor" href="#rostering-run-stats"><span><code>rostering_run_stats</code></span></a></h3><p>To fully capture counts for ingested, created, updated, and unenrolled entities per type, we use a normalized schema. This is cleaner and more extensible than expanding the <code>rostering_runs</code> table.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> rostering_run_stats <span class="token punctuation">(</span></span>
<span class="line">  id UUID <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">DEFAULT</span> gen_random_uuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  run_id UUID <span class="token keyword">REFERENCES</span> rostering_runs<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  entity_type <span class="token keyword">TEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">CHECK</span> <span class="token punctuation">(</span>entity_type <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;org&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;course&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;enrollment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">action</span> <span class="token keyword">TEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">CHECK</span> <span class="token punctuation">(</span><span class="token keyword">action</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;created&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;updated&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;unenrolled&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;skipped&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;failed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  count <span class="token keyword">INTEGER</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">  created_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  updated_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  deleted_at <span class="token keyword">TIMESTAMP</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="user-rostering-events" tabindex="-1"><a class="header-anchor" href="#user-rostering-events"><span><code>user_rostering_events</code></span></a></h3><div class="hint-container info"><p class="hint-container-title">Discuss</p><p>Is this necessary? We could just use the <code>rostering_sync_status</code> table to capture this information.</p></div><p>This table captures notable, discrete events during rostering runs, primarily for audit and tracking. Think of it as a log of business-level outcomes like:</p><ul><li>A user being unenrolled</li><li>An auth UID being bound</li><li>A batch being skipped due to validation failure</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user_rostering_events <span class="token punctuation">(</span></span>
<span class="line">  id UUID <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">DEFAULT</span> gen_random_uuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  rostering_run_id UUID <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">REFERENCES</span> rostering_runs<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  event_type <span class="token keyword">TEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">CHECK</span> <span class="token punctuation">(</span>event_type <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;unenroll&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;auth_bind&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;batch_skip&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  user_id UUID <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">REFERENCES</span> users<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">timestamp</span> <span class="token keyword">TIMESTAMP</span><span class="token punctuation">,</span></span>
<span class="line">  details JSONB<span class="token punctuation">,</span></span>
<span class="line">  created_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  updated_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  deleted_at <span class="token keyword">TIMESTAMP</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rostering-sync-status" tabindex="-1"><a class="header-anchor" href="#rostering-sync-status"><span><code>rostering_sync_status</code></span></a></h3><p>This table records the result of attempting to sync each entity (user, org, class, etc.) in a given ingestion run. It’s used for:</p><ul><li>Tracking which entities succeeded/failed</li><li>Supporting retries on partial failures</li><li>Diagnosing ingestion problems at the row level</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> rostering_sync_status <span class="token punctuation">(</span></span>
<span class="line">  id UUID <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">DEFAULT</span> gen_random_uuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  rostering_run_id UUID <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">REFERENCES</span> rostering_runs<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  entity_type <span class="token keyword">TEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">CHECK</span> <span class="token punctuation">(</span>entity_type <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;org&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;course&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;enrollment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  entity_id UUID <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">status</span> <span class="token keyword">TEXT</span><span class="token punctuation">,</span> <span class="token comment">-- &#39;success&#39;, &#39;failed&#39;, &#39;skipped&#39;, etc.</span></span>
<span class="line">  error_message <span class="token keyword">TEXT</span><span class="token punctuation">,</span></span>
<span class="line">  processed_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  created_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  updated_at <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  deleted_at <span class="token keyword">TIMESTAMP</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16))])}const m=l(d,[["render",k],["__file","rostering-integration.html.vue"]]),h=JSON.parse('{"path":"/developer/tech-specs/backend/rostering-integration.html","title":"ROAR Rostering Integration Spec","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"Scope","slug":"scope","link":"#scope","children":[]},{"level":2,"title":"Actors","slug":"actors","link":"#actors","children":[]},{"level":2,"title":"Data Models","slug":"data-models","link":"#data-models","children":[]},{"level":2,"title":"Workflows","slug":"workflows","link":"#workflows","children":[{"level":3,"title":"Full Rostering Ingestion","slug":"full-rostering-ingestion","link":"#full-rostering-ingestion","children":[]},{"level":3,"title":"Deferred Auth UID Binding","slug":"deferred-auth-uid-binding","link":"#deferred-auth-uid-binding","children":[]},{"level":3,"title":"Unenrollment Flow (stale user detection)","slug":"unenrollment-flow-stale-user-detection","link":"#unenrollment-flow-stale-user-detection","children":[]},{"level":3,"title":"Roster Sync Validation","slug":"roster-sync-validation","link":"#roster-sync-validation","children":[]},{"level":3,"title":"Monitoring & Alerts","slug":"monitoring-alerts","link":"#monitoring-alerts","children":[]},{"level":3,"title":"Post-sync validation","slug":"post-sync-validation","link":"#post-sync-validation","children":[]}]},{"level":2,"title":"SQL Schema","slug":"sql-schema","link":"#sql-schema","children":[{"level":3,"title":"users","slug":"users","link":"#users","children":[]},{"level":3,"title":"rostering_partners","slug":"rostering-partners","link":"#rostering-partners","children":[]},{"level":3,"title":"rostering_runs","slug":"rostering-runs","link":"#rostering-runs","children":[]},{"level":3,"title":"rostering_run_stats","slug":"rostering-run-stats","link":"#rostering-run-stats","children":[]},{"level":3,"title":"user_rostering_events","slug":"user-rostering-events","link":"#user-rostering-events","children":[]},{"level":3,"title":"rostering_sync_status","slug":"rostering-sync-status","link":"#rostering-sync-status","children":[]}]}],"git":{"updatedTime":1752082677000,"contributors":[{"name":"Adam Richie-Halford","username":"Adam Richie-Halford","email":"richiehalford@gmail.com","commits":2,"url":"https://github.com/Adam Richie-Halford"}]},"filePathRelative":"developer/tech-specs/backend/rostering-integration.md"}');export{m as comp,h as data};
