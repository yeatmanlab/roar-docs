import{_ as l,c as i,a as t,e as r,f as s,b as n,d as o,r as p,o as d}from"./app-D5uAIr3F.js";const c={};function f(h,e){const a=p("RouteLink");return d(),i("div",null,[t("p",null,[r(a,{to:"/developer/backend-architecture/api/"},{default:s(()=>e[0]||(e[0]=[t("strong",null,"@roar-firebase-functions/core",-1)])),_:1})]),e[4]||(e[4]=t("hr",null,null,-1)),t("p",null,[r(a,{to:"/developer/backend-architecture/api/"},{default:s(()=>e[1]||(e[1]=[n("@roar-firebase-functions/core")])),_:1}),e[2]||(e[2]=n(" / FilterAdapter"))]),e[5]||(e[5]=o('<h1 id="interface-filteradapter-t" tabindex="-1"><a class="header-anchor" href="#interface-filteradapter-t"><span>Interface: FilterAdapter&lt;T&gt;</span></a></h1><p>Defined in: <a href="https://github.com/yeatmanlab/roar-firebase-functions/blob/24ea7b8e0f05ba2fca7d62901c43f15726f15a89/packages/core/src/filters/base.filter.ts#L72" target="_blank" rel="noopener noreferrer">packages/core/src/filters/base.filter.ts:72</a></p><p>Interface that defines a function to create filters from a BaseFilter object.</p><p>This adapter pattern interface provides a way to transform BaseFilter objects into domain-specific filter representations of type T. Implementations of this interface should define how to convert both SingleFilter and CompositeFilter structures into the target filter format.</p><h2 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters"><span>Type Parameters</span></a></h2><h3 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h3><p><code>T</code></p><p>The target filter type that BaseFilter objects will be converted to</p><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods"><span>Methods</span></a></h2><h3 id="adapt" tabindex="-1"><a class="header-anchor" href="#adapt"><span>adapt()</span></a></h3><blockquote><p><strong>adapt</strong>(<code>filter</code>): <code>T</code></p></blockquote><p>Defined in: <a href="https://github.com/yeatmanlab/roar-firebase-functions/blob/24ea7b8e0f05ba2fca7d62901c43f15726f15a89/packages/core/src/filters/base.filter.ts#L73" target="_blank" rel="noopener noreferrer">packages/core/src/filters/base.filter.ts:73</a></p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><h5 id="filter" tabindex="-1"><a class="header-anchor" href="#filter"><span>filter</span></a></h5>',14)),t("p",null,[r(a,{to:"/developer/backend-architecture/api/type-aliases/BaseFilter.html"},{default:s(()=>e[3]||(e[3]=[t("code",null,"BaseFilter",-1)])),_:1})]),e[6]||(e[6]=t("h4",{id:"returns",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns"},[t("span",null,"Returns")])],-1)),e[7]||(e[7]=t("p",null,[t("code",null,"T")],-1))])}const m=l(c,[["render",f],["__file","FilterAdapter.html.vue"]]),b=JSON.parse('{"path":"/developer/backend-architecture/api/interfaces/FilterAdapter.html","title":"Interface: FilterAdapter<T>","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Type Parameters","slug":"type-parameters","link":"#type-parameters","children":[{"level":3,"title":"T","slug":"t","link":"#t","children":[]}]},{"level":2,"title":"Methods","slug":"methods","link":"#methods","children":[{"level":3,"title":"adapt()","slug":"adapt","link":"#adapt","children":[]}]}],"git":{"updatedTime":1744657380000,"contributors":[{"name":"Kyle","username":"Kyle","email":"ksmontville@gmail.com","commits":1,"url":"https://github.com/Kyle"}]},"filePathRelative":"developer/backend-architecture/api/interfaces/FilterAdapter.md"}');export{m as comp,b as data};
