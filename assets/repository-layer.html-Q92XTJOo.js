import{_ as s,c as a,d as o,e as r,a as t,o as n,r as l}from"./app-BVqTKxSm.js";const c={};function p(d,e){const i=l("Mermaid");return n(),a("div",null,[e[0]||(e[0]=o('<h1 id="repository-layer-architecture" tabindex="-1"><a class="header-anchor" href="#repository-layer-architecture"><span>Repository Layer Architecture</span></a></h1><p>The ROAR backend implements a sophisticated repository pattern that provides a flexible and maintainable approach to data access. This architecture is illustrated through three key structural layers:</p><h2 id="_1-base-repository-interface-layer" tabindex="-1"><a class="header-anchor" href="#_1-base-repository-interface-layer"><span>1. Base Repository Interface Layer</span></a></h2><p>The foundation of our repository pattern is the generic <code>BaseRepository&lt;T&gt;</code> interface, which defines standard CRUD operations:</p><ul><li>create()</li><li>get()</li><li>getAll()</li><li>update()</li><li>delete()</li><li>runTransaction()</li></ul><p>This interface ensures consistent data access patterns across all entity types while maintaining type safety through generics.</p><h2 id="_2-specialized-repository-interfaces" tabindex="-1"><a class="header-anchor" href="#_2-specialized-repository-interfaces"><span>2. Specialized Repository Interfaces</span></a></h2><p>Building on the base interface, we define specialized repository interfaces for specific entity types:</p><ul><li>AdministrationBaseRepository</li><li>UserBaseRepository</li><li>UserClaimBaseRepository</li><li>IdentityProviderBaseRepository</li><li>OrgBaseRepository</li></ul><p>Each specialized interface extends BaseRepository and adds entity-specific operations where needed. For example:</p><ul><li>AdministrationBaseRepository adds <code>getByName()</code></li><li>UserClaimBaseRepository adds <code>getByRoarUid()</code></li><li>IdentityProviderBaseRepository adds <code>getByProviderId()</code></li></ul><h2 id="_3-concrete-implementation-layer" tabindex="-1"><a class="header-anchor" href="#_3-concrete-implementation-layer"><span>3. Concrete Implementation Layer</span></a></h2><p>These concrete implementations encapsulate the logic required to operate within the context of that backend. The classes of the concrete implementation extend the contract defined by the base repository classes. In the example of Firestore, the FirestoreBaseRepository class provides a Firestore-specific implementation of the base repository contract which encapsulates the Firestore-specific logic required to interact with Firestore.</p><p>A Postgres or SQL implementation could be built by extending the base repository contract and implementing the required methods.</p><p>The concrete implementation layer is built around Firestore as the data store:</p><h3 id="firestorebaserepository" tabindex="-1"><a class="header-anchor" href="#firestorebaserepository"><span>FirestoreBaseRepository</span></a></h3><p>An abstract class that:</p><ul><li>Implements the BaseRepository interface</li><li>Provides Firestore-specific functionality</li><li>Manages collection references and groups</li><li>Handles filtering and transactions</li><li>Serves as the foundation for all Firestore-specific repositories</li></ul><h3 id="concrete-repositories" tabindex="-1"><a class="header-anchor" href="#concrete-repositories"><span>Concrete Repositories</span></a></h3><p>Each entity type has its own concrete repository class that:</p><ul><li>Extends FirestoreBaseRepository</li><li>Implements its corresponding specialized interface</li><li>Provides entity-specific implementation details</li><li>Manages Firestore collections for that entity</li></ul><h3 id="supporting-components" tabindex="-1"><a class="header-anchor" href="#supporting-components"><span>Supporting Components</span></a></h3><ul><li>FirestoreFilterAdapter: Transforms generic filters into Firestore-compatible queries</li><li>FirestoreImplementation: Acts as a factory, providing access to repository and service instances</li></ul><h2 id="benefits-of-this-architecture" tabindex="-1"><a class="header-anchor" href="#benefits-of-this-architecture"><span>Benefits of This Architecture</span></a></h2><ol><li><strong>Abstraction</strong>: The interface-based approach abstracts data access details from business logic</li><li><strong>Flexibility</strong>: Easily switch between different data stores by implementing new concrete repositories</li><li><strong>Type Safety</strong>: Generic typing ensures compile-time type checking</li><li><strong>Maintainability</strong>: Consistent patterns make the codebase easier to maintain</li><li><strong>Testability</strong>: Interface-based design enables easy mocking for unit tests</li><li><strong>Scalability</strong>: New entity types can be added by following the established pattern</li></ol><h2 id="base-repository-hierarchy" tabindex="-1"><a class="header-anchor" href="#base-repository-hierarchy"><span>Base Repository Hierarchy</span></a></h2>',26)),r(i,{id:"mermaid-226",code:"eJyVVMtu2zAQvOsrFgYCtAjyA4ERwKlRQIc+4CanpoetuLYXkEiVpNwqTfXtXUqWAz3t+GSIszPLmV0mKTq3ZtxZzKKrK7hHR7Ch3Dj2xpYQa092iwlFNbI+fz2uHir4Gy2X3KLu7qLrxBJ6epejULr3t/DVmowdVRtyReqlpIqud+RnAPAiLRz/f//RwFdpOlNRo4pcnRVWlNIY5mBYybEt9INF7TDxbPQQhrqson9RBPITt77llDCm/Exq1DRXAxvnVipjzc5bDNRdH8XEAOwaGb6Em9+XnzGbvlaXt3YiVB6bbLQfHdkLFQd1H1Lk7E3tbgzaR1aTHZ9YJZCBZKxIe/al1BxYXdx2o9wWxdPiff5xw77Y3RuEuxHEyn0UTaFwwy4ExHrX05RJWtOWNQHrPVn2qBMCS2nN5/acN4PUa2n5cnMzO1a3QH88aeXgN/t9Dwq+zGmSdjgxPbIAOE8xMjwjPDVqnmx+LHqcffA89SDrHtvxvCFp81opBdp4cuBNmBnL2xL8nkCZDFlDZuSlaVILMNgaO/8CLD6hxp3w9VKqb8Lknp60aDrIyO+NCqq/CpK6nyVoeR4WXamRhT8J1Mm1tCN1YwvfKW7imm7Mkgw5HSj0Ft4CKIJivO5pndn0k+QgzQssyVvsQHW42SchOULNz+d8l4UH7IYUrx1sZcPByNIvov+fLpZv"}),e[1]||(e[1]=t("h2",{id:"firestore-implementation",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#firestore-implementation"},[t("span",null,"Firestore Implementation")])],-1)),r(i,{id:"mermaid-230",code:"eJytVlFv2yAQfvevQJkmpavaHxBVldJU6fLSTVmqPax7oDZJmDBYQCpl6/Lbd4DjGNsQW2tf6sB3dx/H8d2lDCt1T/FG4jz5+BHdYUXQkhRCUS3kHi24JnKNU5JYpN0/bR9WB/QnubmhR9TtbXKZSoI1GRcYXKqLCfoqRU4VOSyJ2jENJofkckN0BIDegEL5/eOng08Zi1hY1K7IzgbOCCNdmFdBM9iWO76SmCucaip4G4b5/pD8TRIEf5CtbwVJKWb0N8k6k6Ys0GVumuWUU6UlNq79PEISDdBPpFkxJ7/bP+I8fCzfr82EsSxJuthPisieEVt2M4ZpPojuUmD5RLMg48orXEgr5CIjXFO9B5tXmvWm7SIfjRbh4E3/3Qn7IjcDAvtXsMjUHGKCC9VmASDKN42YUElzKomCQKT5AmukKkzXI3Ts8IthkeqS3IdUMEZsLU/QrPpekjWRhMOjboAepNgVdaRdaKJW+4LUQea3w6wpg+xMM1zAv8mJ8Ly+XqXt5GEMGQrR85GWkA8/cfShhpaPrIgO1J9TgUUKy8iLBa6JTrf3It3lUGnn4aW2hVTNYnpIqsX1UECLi6vgkdZ3qrfu5joKuU3ynHaumjU/ExwOpkmt+Kuqpp52VgD/pbWe52UqOGzuUlgbX7ynglYMjHj1iRu2ttLXn/p/qWkVuCl7/eO/m6ZWXEAZ4+HrquUE80ToHbT2M2EFkY5Vd5l5enVkiM3PsZM4iOIwsZTnBSNGAyzTcANJGQXQBImXX3Do8i3V3oG/A7f9SmGy8FZPZ1vwLZFUY1BPJAmzodWWFu6YjZ5283Z1FZ1LgkbtgSIK7Zghgvj4ABA0a3Vsl5IW9Po61EedQWDTBTmrQwNc+EIy0LChIQOsw0IwwIn3gl3eouOtn/Zo8jpGVd+6I2+hMbVt2JW3MxOn7+RM+tpzo2/ekTjbCHO7ZmSi/WhDVyLqN9KesEI69Gl4Hcc8xMr4nF20imPGfYs45qP7Kh6FLlsChy+0FrIpIaMHwkFiU7ip49rzM69UHWVkDSnlG1h8MaP8bPl0jwQ0HHetI9956HJH03KSR9Q7A3jdKfBem5mwgkW9hchYY+iXsBYK0sjHaA4BTLTC5tGRxil0F4W0QJgx/5CYZ6jsP4hCuzZdBg70D8XOsxw="})])}const y=s(c,[["render",p],["__file","repository-layer.html.vue"]]),m=JSON.parse('{"path":"/developer/backend-architecture/architecture/repository-layer.html","title":"Repository Layer Architecture","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1. Base Repository Interface Layer","slug":"_1-base-repository-interface-layer","link":"#_1-base-repository-interface-layer","children":[]},{"level":2,"title":"2. Specialized Repository Interfaces","slug":"_2-specialized-repository-interfaces","link":"#_2-specialized-repository-interfaces","children":[]},{"level":2,"title":"3. Concrete Implementation Layer","slug":"_3-concrete-implementation-layer","link":"#_3-concrete-implementation-layer","children":[{"level":3,"title":"FirestoreBaseRepository","slug":"firestorebaserepository","link":"#firestorebaserepository","children":[]},{"level":3,"title":"Concrete Repositories","slug":"concrete-repositories","link":"#concrete-repositories","children":[]},{"level":3,"title":"Supporting Components","slug":"supporting-components","link":"#supporting-components","children":[]}]},{"level":2,"title":"Benefits of This Architecture","slug":"benefits-of-this-architecture","link":"#benefits-of-this-architecture","children":[]},{"level":2,"title":"Base Repository Hierarchy","slug":"base-repository-hierarchy","link":"#base-repository-hierarchy","children":[]},{"level":2,"title":"Firestore Implementation","slug":"firestore-implementation","link":"#firestore-implementation","children":[]}],"git":{"updatedTime":1744670523000,"contributors":[{"name":"Kyle","username":"Kyle","email":"ksmontville@gmail.com","commits":4,"url":"https://github.com/Kyle"}]},"filePathRelative":"developer/backend-architecture/architecture/repository-layer.md"}');export{y as comp,m as data};
